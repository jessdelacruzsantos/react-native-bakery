<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: squareup/connect/v3/actions/refund.proto
//   Date: 2016-01-15 23:06:16

namespace squareup\connect\v3\actions {

  class RefundTenderRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $location_id = null;
    
    /**  @var string */
    public $idempotency_key = null;
    
    /**  @var string */
    public $source_transaction_id = null;
    
    /**  @var string */
    public $source_tender_id = null;
    
    /**  @var string */
    public $reason = null;
    
    /**  @var \squareup\connect\v3\resources\Money */
    public $amount_money = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.RefundTenderRequest');

      // REQUIRED STRING location_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "location_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING idempotency_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "idempotency_key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING source_transaction_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "source_transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING source_tender_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "source_tender_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING reason = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "reason";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE amount_money = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "amount_money";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\squareup\connect\v3\resources\Money';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <location_id> has a value
     *
     * @return boolean
     */
    public function hasLocationId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <location_id> value
     *
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function clearLocationId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <location_id> value
     *
     * @return string
     */
    public function getLocationId(){
      return $this->_get(1);
    }
    
    /**
     * Set <location_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function setLocationId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <idempotency_key> has a value
     *
     * @return boolean
     */
    public function hasIdempotencyKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <idempotency_key> value
     *
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function clearIdempotencyKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <idempotency_key> value
     *
     * @return string
     */
    public function getIdempotencyKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <idempotency_key> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function setIdempotencyKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <source_transaction_id> has a value
     *
     * @return boolean
     */
    public function hasSourceTransactionId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <source_transaction_id> value
     *
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function clearSourceTransactionId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <source_transaction_id> value
     *
     * @return string
     */
    public function getSourceTransactionId(){
      return $this->_get(3);
    }
    
    /**
     * Set <source_transaction_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function setSourceTransactionId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <source_tender_id> has a value
     *
     * @return boolean
     */
    public function hasSourceTenderId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <source_tender_id> value
     *
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function clearSourceTenderId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <source_tender_id> value
     *
     * @return string
     */
    public function getSourceTenderId(){
      return $this->_get(4);
    }
    
    /**
     * Set <source_tender_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function setSourceTenderId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <reason> has a value
     *
     * @return boolean
     */
    public function hasReason(){
      return $this->_has(5);
    }
    
    /**
     * Clear <reason> value
     *
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function clearReason(){
      return $this->_clear(5);
    }
    
    /**
     * Get <reason> value
     *
     * @return string
     */
    public function getReason(){
      return $this->_get(5);
    }
    
    /**
     * Set <reason> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function setReason( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <amount_money> has a value
     *
     * @return boolean
     */
    public function hasAmountMoney(){
      return $this->_has(6);
    }
    
    /**
     * Clear <amount_money> value
     *
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function clearAmountMoney(){
      return $this->_clear(6);
    }
    
    /**
     * Get <amount_money> value
     *
     * @return \squareup\connect\v3\resources\Money
     */
    public function getAmountMoney(){
      return $this->_get(6);
    }
    
    /**
     * Set <amount_money> value
     *
     * @param \squareup\connect\v3\resources\Money $value
     * @return \squareup\connect\v3\actions\RefundTenderRequest
     */
    public function setAmountMoney(\squareup\connect\v3\resources\Money $value){
      return $this->_set(6, $value);
    }
  }
}

namespace squareup\connect\v3\actions {

  class RefundTenderResponse extends \DrSlump\Protobuf\Message {

    /**  @var \squareup\connect\v3\resources\Error[]  */
    public $errors = array();
    
    /**  @var \squareup\connect\v3\resources\TenderRefund */
    public $refund = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.RefundTenderResponse');

      // REPEATED MESSAGE errors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "errors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\squareup\connect\v3\resources\Error';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE refund = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "refund";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\squareup\connect\v3\resources\TenderRefund';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <errors> has a value
     *
     * @return boolean
     */
    public function hasErrors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <errors> value
     *
     * @return \squareup\connect\v3\actions\RefundTenderResponse
     */
    public function clearErrors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <errors> value
     *
     * @param int $idx
     * @return \squareup\connect\v3\resources\Error
     */
    public function getErrors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <errors> value
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\RefundTenderResponse
     */
    public function setErrors(\squareup\connect\v3\resources\Error $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <errors>
     *
     * @return \squareup\connect\v3\resources\Error[]
     */
    public function getErrorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <errors>
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\RefundTenderResponse
     */
    public function addErrors(\squareup\connect\v3\resources\Error $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <refund> has a value
     *
     * @return boolean
     */
    public function hasRefund(){
      return $this->_has(2);
    }
    
    /**
     * Clear <refund> value
     *
     * @return \squareup\connect\v3\actions\RefundTenderResponse
     */
    public function clearRefund(){
      return $this->_clear(2);
    }
    
    /**
     * Get <refund> value
     *
     * @return \squareup\connect\v3\resources\TenderRefund
     */
    public function getRefund(){
      return $this->_get(2);
    }
    
    /**
     * Set <refund> value
     *
     * @param \squareup\connect\v3\resources\TenderRefund $value
     * @return \squareup\connect\v3\actions\RefundTenderResponse
     */
    public function setRefund(\squareup\connect\v3\resources\TenderRefund $value){
      return $this->_set(2, $value);
    }
  }
}

namespace squareup\connect\v3\actions\ListTenderRefundsRequest {

  class Params extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $location_id = null;
    
    /**  @var \squareup\connect\v3\actions\OrderedTimeRange */
    public $ordered_time_range = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.ListTenderRefundsRequest.Params');

      // REQUIRED STRING location_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "location_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED MESSAGE ordered_time_range = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "ordered_time_range";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\squareup\connect\v3\actions\OrderedTimeRange';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <location_id> has a value
     *
     * @return boolean
     */
    public function hasLocationId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <location_id> value
     *
     * @return \squareup\connect\v3\actions\ListTenderRefundsRequest\Params
     */
    public function clearLocationId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <location_id> value
     *
     * @return string
     */
    public function getLocationId(){
      return $this->_get(1);
    }
    
    /**
     * Set <location_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\ListTenderRefundsRequest\Params
     */
    public function setLocationId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <ordered_time_range> has a value
     *
     * @return boolean
     */
    public function hasOrderedTimeRange(){
      return $this->_has(2);
    }
    
    /**
     * Clear <ordered_time_range> value
     *
     * @return \squareup\connect\v3\actions\ListTenderRefundsRequest\Params
     */
    public function clearOrderedTimeRange(){
      return $this->_clear(2);
    }
    
    /**
     * Get <ordered_time_range> value
     *
     * @return \squareup\connect\v3\actions\OrderedTimeRange
     */
    public function getOrderedTimeRange(){
      return $this->_get(2);
    }
    
    /**
     * Set <ordered_time_range> value
     *
     * @param \squareup\connect\v3\actions\OrderedTimeRange $value
     * @return \squareup\connect\v3\actions\ListTenderRefundsRequest\Params
     */
    public function setOrderedTimeRange(\squareup\connect\v3\actions\OrderedTimeRange $value){
      return $this->_set(2, $value);
    }
  }
}

namespace squareup\connect\v3\actions {

  class ListTenderRefundsRequest extends \DrSlump\Protobuf\Message {

    /**  @var \squareup\connect\v3\actions\ListTenderRefundsRequest\Params */
    public $params = null;
    
    /**  @var string */
    public $cursor = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.ListTenderRefundsRequest');

      // OPTIONAL MESSAGE params = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "params";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\squareup\connect\v3\actions\ListTenderRefundsRequest\Params';
      $descriptor->addField($f);

      // OPTIONAL STRING cursor = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <params> has a value
     *
     * @return boolean
     */
    public function hasParams(){
      return $this->_has(1);
    }
    
    /**
     * Clear <params> value
     *
     * @return \squareup\connect\v3\actions\ListTenderRefundsRequest
     */
    public function clearParams(){
      return $this->_clear(1);
    }
    
    /**
     * Get <params> value
     *
     * @return \squareup\connect\v3\actions\ListTenderRefundsRequest\Params
     */
    public function getParams(){
      return $this->_get(1);
    }
    
    /**
     * Set <params> value
     *
     * @param \squareup\connect\v3\actions\ListTenderRefundsRequest\Params $value
     * @return \squareup\connect\v3\actions\ListTenderRefundsRequest
     */
    public function setParams(\squareup\connect\v3\actions\ListTenderRefundsRequest\Params $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cursor> has a value
     *
     * @return boolean
     */
    public function hasCursor(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cursor> value
     *
     * @return \squareup\connect\v3\actions\ListTenderRefundsRequest
     */
    public function clearCursor(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cursor> value
     *
     * @return string
     */
    public function getCursor(){
      return $this->_get(2);
    }
    
    /**
     * Set <cursor> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\ListTenderRefundsRequest
     */
    public function setCursor( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace squareup\connect\v3\actions {

  class ListTenderRefundsResponse extends \DrSlump\Protobuf\Message {

    /**  @var \squareup\connect\v3\resources\Error[]  */
    public $errors = array();
    
    /**  @var \squareup\connect\v3\resources\TenderRefund[]  */
    public $refund = array();
    
    /**  @var string */
    public $cursor = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.ListTenderRefundsResponse');

      // REPEATED MESSAGE errors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "errors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\squareup\connect\v3\resources\Error';
      $descriptor->addField($f);

      // REPEATED MESSAGE refund = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "refund";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\squareup\connect\v3\resources\TenderRefund';
      $descriptor->addField($f);

      // OPTIONAL STRING cursor = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <errors> has a value
     *
     * @return boolean
     */
    public function hasErrors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <errors> value
     *
     * @return \squareup\connect\v3\actions\ListTenderRefundsResponse
     */
    public function clearErrors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <errors> value
     *
     * @param int $idx
     * @return \squareup\connect\v3\resources\Error
     */
    public function getErrors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <errors> value
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\ListTenderRefundsResponse
     */
    public function setErrors(\squareup\connect\v3\resources\Error $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <errors>
     *
     * @return \squareup\connect\v3\resources\Error[]
     */
    public function getErrorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <errors>
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\ListTenderRefundsResponse
     */
    public function addErrors(\squareup\connect\v3\resources\Error $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <refund> has a value
     *
     * @return boolean
     */
    public function hasRefund(){
      return $this->_has(2);
    }
    
    /**
     * Clear <refund> value
     *
     * @return \squareup\connect\v3\actions\ListTenderRefundsResponse
     */
    public function clearRefund(){
      return $this->_clear(2);
    }
    
    /**
     * Get <refund> value
     *
     * @param int $idx
     * @return \squareup\connect\v3\resources\TenderRefund
     */
    public function getRefund($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <refund> value
     *
     * @param \squareup\connect\v3\resources\TenderRefund $value
     * @return \squareup\connect\v3\actions\ListTenderRefundsResponse
     */
    public function setRefund(\squareup\connect\v3\resources\TenderRefund $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <refund>
     *
     * @return \squareup\connect\v3\resources\TenderRefund[]
     */
    public function getRefundList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <refund>
     *
     * @param \squareup\connect\v3\resources\TenderRefund $value
     * @return \squareup\connect\v3\actions\ListTenderRefundsResponse
     */
    public function addRefund(\squareup\connect\v3\resources\TenderRefund $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <cursor> has a value
     *
     * @return boolean
     */
    public function hasCursor(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cursor> value
     *
     * @return \squareup\connect\v3\actions\ListTenderRefundsResponse
     */
    public function clearCursor(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cursor> value
     *
     * @return string
     */
    public function getCursor(){
      return $this->_get(3);
    }
    
    /**
     * Set <cursor> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\ListTenderRefundsResponse
     */
    public function setCursor( $value){
      return $this->_set(3, $value);
    }
  }
}

