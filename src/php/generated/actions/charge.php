<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: squareup/connect/v3/actions/charge.proto
//   Date: 2015-10-21 21:23:57

namespace squareup\connect\v3\actions\ListChargesRequest\Params {

  class Sort extends \DrSlump\Protobuf\Enum {
    const CREATED_AT_DESC = 0;
    const CREATED_AT_ASC = 1;
  }
}
namespace squareup\connect\v3\actions\ListChargesRequest {

  class Params extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $location_id = null;
    
    /**  @var string */
    public $begin_time = null;
    
    /**  @var string */
    public $end_time = null;
    
    /**  @var int - \squareup\connect\v3\actions\ListChargesRequest\Params\Sort */
    public $sort = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.ListChargesRequest.Params');

      // REQUIRED STRING location_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "location_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING begin_time = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "begin_time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING end_time = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "end_time";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED ENUM sort = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "sort";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\squareup\connect\v3\actions\ListChargesRequest\Params\Sort';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <location_id> has a value
     *
     * @return boolean
     */
    public function hasLocationId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <location_id> value
     *
     * @return \squareup\connect\v3\actions\ListChargesRequest\Params
     */
    public function clearLocationId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <location_id> value
     *
     * @return string
     */
    public function getLocationId(){
      return $this->_get(1);
    }
    
    /**
     * Set <location_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\ListChargesRequest\Params
     */
    public function setLocationId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <begin_time> has a value
     *
     * @return boolean
     */
    public function hasBeginTime(){
      return $this->_has(2);
    }
    
    /**
     * Clear <begin_time> value
     *
     * @return \squareup\connect\v3\actions\ListChargesRequest\Params
     */
    public function clearBeginTime(){
      return $this->_clear(2);
    }
    
    /**
     * Get <begin_time> value
     *
     * @return string
     */
    public function getBeginTime(){
      return $this->_get(2);
    }
    
    /**
     * Set <begin_time> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\ListChargesRequest\Params
     */
    public function setBeginTime( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <end_time> has a value
     *
     * @return boolean
     */
    public function hasEndTime(){
      return $this->_has(3);
    }
    
    /**
     * Clear <end_time> value
     *
     * @return \squareup\connect\v3\actions\ListChargesRequest\Params
     */
    public function clearEndTime(){
      return $this->_clear(3);
    }
    
    /**
     * Get <end_time> value
     *
     * @return string
     */
    public function getEndTime(){
      return $this->_get(3);
    }
    
    /**
     * Set <end_time> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\ListChargesRequest\Params
     */
    public function setEndTime( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <sort> has a value
     *
     * @return boolean
     */
    public function hasSort(){
      return $this->_has(4);
    }
    
    /**
     * Clear <sort> value
     *
     * @return \squareup\connect\v3\actions\ListChargesRequest\Params
     */
    public function clearSort(){
      return $this->_clear(4);
    }
    
    /**
     * Get <sort> value
     *
     * @return int - \squareup\connect\v3\actions\ListChargesRequest\Params\Sort
     */
    public function getSort(){
      return $this->_get(4);
    }
    
    /**
     * Set <sort> value
     *
     * @param int - \squareup\connect\v3\actions\ListChargesRequest\Params\Sort $value
     * @return \squareup\connect\v3\actions\ListChargesRequest\Params
     */
    public function setSort( $value){
      return $this->_set(4, $value);
    }
  }
}

namespace squareup\connect\v3\actions {

  class ListChargesRequest extends \DrSlump\Protobuf\Message {

    /**  @var \squareup\connect\v3\actions\ListChargesRequest\Params */
    public $params = null;
    
    /**  @var string */
    public $cursor = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.ListChargesRequest');

      // OPTIONAL MESSAGE params = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "params";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\squareup\connect\v3\actions\ListChargesRequest\Params';
      $descriptor->addField($f);

      // OPTIONAL STRING cursor = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <params> has a value
     *
     * @return boolean
     */
    public function hasParams(){
      return $this->_has(1);
    }
    
    /**
     * Clear <params> value
     *
     * @return \squareup\connect\v3\actions\ListChargesRequest
     */
    public function clearParams(){
      return $this->_clear(1);
    }
    
    /**
     * Get <params> value
     *
     * @return \squareup\connect\v3\actions\ListChargesRequest\Params
     */
    public function getParams(){
      return $this->_get(1);
    }
    
    /**
     * Set <params> value
     *
     * @param \squareup\connect\v3\actions\ListChargesRequest\Params $value
     * @return \squareup\connect\v3\actions\ListChargesRequest
     */
    public function setParams(\squareup\connect\v3\actions\ListChargesRequest\Params $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <cursor> has a value
     *
     * @return boolean
     */
    public function hasCursor(){
      return $this->_has(2);
    }
    
    /**
     * Clear <cursor> value
     *
     * @return \squareup\connect\v3\actions\ListChargesRequest
     */
    public function clearCursor(){
      return $this->_clear(2);
    }
    
    /**
     * Get <cursor> value
     *
     * @return string
     */
    public function getCursor(){
      return $this->_get(2);
    }
    
    /**
     * Set <cursor> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\ListChargesRequest
     */
    public function setCursor( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace squareup\connect\v3\actions {

  class ListChargesResponse extends \DrSlump\Protobuf\Message {

    /**  @var \squareup\connect\v3\resources\Error[]  */
    public $errors = array();
    
    /**  @var \squareup\connect\v3\resources\Charge[]  */
    public $charges = array();
    
    /**  @var string */
    public $cursor = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.ListChargesResponse');

      // REPEATED MESSAGE errors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "errors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\squareup\connect\v3\resources\Error';
      $descriptor->addField($f);

      // REPEATED MESSAGE charges = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charges";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\squareup\connect\v3\resources\Charge';
      $descriptor->addField($f);

      // OPTIONAL STRING cursor = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "cursor";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <errors> has a value
     *
     * @return boolean
     */
    public function hasErrors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <errors> value
     *
     * @return \squareup\connect\v3\actions\ListChargesResponse
     */
    public function clearErrors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <errors> value
     *
     * @param int $idx
     * @return \squareup\connect\v3\resources\Error
     */
    public function getErrors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <errors> value
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\ListChargesResponse
     */
    public function setErrors(\squareup\connect\v3\resources\Error $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <errors>
     *
     * @return \squareup\connect\v3\resources\Error[]
     */
    public function getErrorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <errors>
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\ListChargesResponse
     */
    public function addErrors(\squareup\connect\v3\resources\Error $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <charges> has a value
     *
     * @return boolean
     */
    public function hasCharges(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charges> value
     *
     * @return \squareup\connect\v3\actions\ListChargesResponse
     */
    public function clearCharges(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charges> value
     *
     * @param int $idx
     * @return \squareup\connect\v3\resources\Charge
     */
    public function getCharges($idx = NULL){
      return $this->_get(2, $idx);
    }
    
    /**
     * Set <charges> value
     *
     * @param \squareup\connect\v3\resources\Charge $value
     * @return \squareup\connect\v3\actions\ListChargesResponse
     */
    public function setCharges(\squareup\connect\v3\resources\Charge $value, $idx = NULL){
      return $this->_set(2, $value, $idx);
    }
    
    /**
     * Get all elements of <charges>
     *
     * @return \squareup\connect\v3\resources\Charge[]
     */
    public function getChargesList(){
     return $this->_get(2);
    }
    
    /**
     * Add a new element to <charges>
     *
     * @param \squareup\connect\v3\resources\Charge $value
     * @return \squareup\connect\v3\actions\ListChargesResponse
     */
    public function addCharges(\squareup\connect\v3\resources\Charge $value){
     return $this->_add(2, $value);
    }
    
    /**
     * Check if <cursor> has a value
     *
     * @return boolean
     */
    public function hasCursor(){
      return $this->_has(3);
    }
    
    /**
     * Clear <cursor> value
     *
     * @return \squareup\connect\v3\actions\ListChargesResponse
     */
    public function clearCursor(){
      return $this->_clear(3);
    }
    
    /**
     * Get <cursor> value
     *
     * @return string
     */
    public function getCursor(){
      return $this->_get(3);
    }
    
    /**
     * Set <cursor> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\ListChargesResponse
     */
    public function setCursor( $value){
      return $this->_set(3, $value);
    }
  }
}

namespace squareup\connect\v3\actions {

  class CreateChargeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $location_id = null;
    
    /**  @var string */
    public $idempotency_key = null;
    
    /**  @var \squareup\connect\v3\resources\Money */
    public $amount_money = null;
    
    /**  @var string */
    public $customer_id = null;
    
    /**  @var string */
    public $encrypted_tokenized_card = null;
    
    /**  @var string */
    public $customer_card_id = null;
    
    /**  @var boolean */
    public $delay_capture = null;
    
    /**  @var string */
    public $reference_id = null;
    
    /**  @var string */
    public $note = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.CreateChargeRequest');

      // REQUIRED STRING location_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "location_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING idempotency_key = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "idempotency_key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // REQUIRED MESSAGE amount_money = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "amount_money";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $f->reference = '\squareup\connect\v3\resources\Money';
      $descriptor->addField($f);

      // OPTIONAL STRING customer_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "customer_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING encrypted_tokenized_card = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "encrypted_tokenized_card";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING customer_card_id = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "customer_card_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL BOOL delay_capture = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "delay_capture";
      $f->type      = \DrSlump\Protobuf::TYPE_BOOL;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING reference_id = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "reference_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING note = 9
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 9;
      $f->name      = "note";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <location_id> has a value
     *
     * @return boolean
     */
    public function hasLocationId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <location_id> value
     *
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function clearLocationId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <location_id> value
     *
     * @return string
     */
    public function getLocationId(){
      return $this->_get(1);
    }
    
    /**
     * Set <location_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function setLocationId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <idempotency_key> has a value
     *
     * @return boolean
     */
    public function hasIdempotencyKey(){
      return $this->_has(2);
    }
    
    /**
     * Clear <idempotency_key> value
     *
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function clearIdempotencyKey(){
      return $this->_clear(2);
    }
    
    /**
     * Get <idempotency_key> value
     *
     * @return string
     */
    public function getIdempotencyKey(){
      return $this->_get(2);
    }
    
    /**
     * Set <idempotency_key> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function setIdempotencyKey( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <amount_money> has a value
     *
     * @return boolean
     */
    public function hasAmountMoney(){
      return $this->_has(3);
    }
    
    /**
     * Clear <amount_money> value
     *
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function clearAmountMoney(){
      return $this->_clear(3);
    }
    
    /**
     * Get <amount_money> value
     *
     * @return \squareup\connect\v3\resources\Money
     */
    public function getAmountMoney(){
      return $this->_get(3);
    }
    
    /**
     * Set <amount_money> value
     *
     * @param \squareup\connect\v3\resources\Money $value
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function setAmountMoney(\squareup\connect\v3\resources\Money $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <customer_id> has a value
     *
     * @return boolean
     */
    public function hasCustomerId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <customer_id> value
     *
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function clearCustomerId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <customer_id> value
     *
     * @return string
     */
    public function getCustomerId(){
      return $this->_get(4);
    }
    
    /**
     * Set <customer_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function setCustomerId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <encrypted_tokenized_card> has a value
     *
     * @return boolean
     */
    public function hasEncryptedTokenizedCard(){
      return $this->_has(5);
    }
    
    /**
     * Clear <encrypted_tokenized_card> value
     *
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function clearEncryptedTokenizedCard(){
      return $this->_clear(5);
    }
    
    /**
     * Get <encrypted_tokenized_card> value
     *
     * @return string
     */
    public function getEncryptedTokenizedCard(){
      return $this->_get(5);
    }
    
    /**
     * Set <encrypted_tokenized_card> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function setEncryptedTokenizedCard( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <customer_card_id> has a value
     *
     * @return boolean
     */
    public function hasCustomerCardId(){
      return $this->_has(6);
    }
    
    /**
     * Clear <customer_card_id> value
     *
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function clearCustomerCardId(){
      return $this->_clear(6);
    }
    
    /**
     * Get <customer_card_id> value
     *
     * @return string
     */
    public function getCustomerCardId(){
      return $this->_get(6);
    }
    
    /**
     * Set <customer_card_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function setCustomerCardId( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <delay_capture> has a value
     *
     * @return boolean
     */
    public function hasDelayCapture(){
      return $this->_has(7);
    }
    
    /**
     * Clear <delay_capture> value
     *
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function clearDelayCapture(){
      return $this->_clear(7);
    }
    
    /**
     * Get <delay_capture> value
     *
     * @return boolean
     */
    public function getDelayCapture(){
      return $this->_get(7);
    }
    
    /**
     * Set <delay_capture> value
     *
     * @param boolean $value
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function setDelayCapture( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <reference_id> has a value
     *
     * @return boolean
     */
    public function hasReferenceId(){
      return $this->_has(8);
    }
    
    /**
     * Clear <reference_id> value
     *
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function clearReferenceId(){
      return $this->_clear(8);
    }
    
    /**
     * Get <reference_id> value
     *
     * @return string
     */
    public function getReferenceId(){
      return $this->_get(8);
    }
    
    /**
     * Set <reference_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function setReferenceId( $value){
      return $this->_set(8, $value);
    }
    
    /**
     * Check if <note> has a value
     *
     * @return boolean
     */
    public function hasNote(){
      return $this->_has(9);
    }
    
    /**
     * Clear <note> value
     *
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function clearNote(){
      return $this->_clear(9);
    }
    
    /**
     * Get <note> value
     *
     * @return string
     */
    public function getNote(){
      return $this->_get(9);
    }
    
    /**
     * Set <note> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\CreateChargeRequest
     */
    public function setNote( $value){
      return $this->_set(9, $value);
    }
  }
}

namespace squareup\connect\v3\actions {

  class CreateChargeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \squareup\connect\v3\resources\Error[]  */
    public $errors = array();
    
    /**  @var \squareup\connect\v3\resources\Charge */
    public $charge = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.CreateChargeResponse');

      // REPEATED MESSAGE errors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "errors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\squareup\connect\v3\resources\Error';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE charge = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charge";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\squareup\connect\v3\resources\Charge';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <errors> has a value
     *
     * @return boolean
     */
    public function hasErrors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <errors> value
     *
     * @return \squareup\connect\v3\actions\CreateChargeResponse
     */
    public function clearErrors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <errors> value
     *
     * @param int $idx
     * @return \squareup\connect\v3\resources\Error
     */
    public function getErrors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <errors> value
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\CreateChargeResponse
     */
    public function setErrors(\squareup\connect\v3\resources\Error $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <errors>
     *
     * @return \squareup\connect\v3\resources\Error[]
     */
    public function getErrorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <errors>
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\CreateChargeResponse
     */
    public function addErrors(\squareup\connect\v3\resources\Error $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <charge> has a value
     *
     * @return boolean
     */
    public function hasCharge(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charge> value
     *
     * @return \squareup\connect\v3\actions\CreateChargeResponse
     */
    public function clearCharge(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charge> value
     *
     * @return \squareup\connect\v3\resources\Charge
     */
    public function getCharge(){
      return $this->_get(2);
    }
    
    /**
     * Set <charge> value
     *
     * @param \squareup\connect\v3\resources\Charge $value
     * @return \squareup\connect\v3\actions\CreateChargeResponse
     */
    public function setCharge(\squareup\connect\v3\resources\Charge $value){
      return $this->_set(2, $value);
    }
  }
}

namespace squareup\connect\v3\actions {

  class CaptureChargeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $location_id = null;
    
    /**  @var string */
    public $charge_id = null;
    
    /**  @var string */
    public $idempotency_key = null;
    
    /**  @var \squareup\connect\v3\resources\Money */
    public $amount_money = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.CaptureChargeRequest');

      // REQUIRED STRING location_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "location_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING charge_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charge_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // OPTIONAL STRING idempotency_key = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "idempotency_key";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE amount_money = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "amount_money";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\squareup\connect\v3\resources\Money';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <location_id> has a value
     *
     * @return boolean
     */
    public function hasLocationId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <location_id> value
     *
     * @return \squareup\connect\v3\actions\CaptureChargeRequest
     */
    public function clearLocationId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <location_id> value
     *
     * @return string
     */
    public function getLocationId(){
      return $this->_get(1);
    }
    
    /**
     * Set <location_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\CaptureChargeRequest
     */
    public function setLocationId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <charge_id> has a value
     *
     * @return boolean
     */
    public function hasChargeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charge_id> value
     *
     * @return \squareup\connect\v3\actions\CaptureChargeRequest
     */
    public function clearChargeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charge_id> value
     *
     * @return string
     */
    public function getChargeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <charge_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\CaptureChargeRequest
     */
    public function setChargeId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <idempotency_key> has a value
     *
     * @return boolean
     */
    public function hasIdempotencyKey(){
      return $this->_has(3);
    }
    
    /**
     * Clear <idempotency_key> value
     *
     * @return \squareup\connect\v3\actions\CaptureChargeRequest
     */
    public function clearIdempotencyKey(){
      return $this->_clear(3);
    }
    
    /**
     * Get <idempotency_key> value
     *
     * @return string
     */
    public function getIdempotencyKey(){
      return $this->_get(3);
    }
    
    /**
     * Set <idempotency_key> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\CaptureChargeRequest
     */
    public function setIdempotencyKey( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <amount_money> has a value
     *
     * @return boolean
     */
    public function hasAmountMoney(){
      return $this->_has(4);
    }
    
    /**
     * Clear <amount_money> value
     *
     * @return \squareup\connect\v3\actions\CaptureChargeRequest
     */
    public function clearAmountMoney(){
      return $this->_clear(4);
    }
    
    /**
     * Get <amount_money> value
     *
     * @return \squareup\connect\v3\resources\Money
     */
    public function getAmountMoney(){
      return $this->_get(4);
    }
    
    /**
     * Set <amount_money> value
     *
     * @param \squareup\connect\v3\resources\Money $value
     * @return \squareup\connect\v3\actions\CaptureChargeRequest
     */
    public function setAmountMoney(\squareup\connect\v3\resources\Money $value){
      return $this->_set(4, $value);
    }
  }
}

namespace squareup\connect\v3\actions {

  class CaptureChargeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \squareup\connect\v3\resources\Error[]  */
    public $errors = array();
    
    /**  @var \squareup\connect\v3\resources\Charge */
    public $charge = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.CaptureChargeResponse');

      // REPEATED MESSAGE errors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "errors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\squareup\connect\v3\resources\Error';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE charge = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charge";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\squareup\connect\v3\resources\Charge';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <errors> has a value
     *
     * @return boolean
     */
    public function hasErrors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <errors> value
     *
     * @return \squareup\connect\v3\actions\CaptureChargeResponse
     */
    public function clearErrors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <errors> value
     *
     * @param int $idx
     * @return \squareup\connect\v3\resources\Error
     */
    public function getErrors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <errors> value
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\CaptureChargeResponse
     */
    public function setErrors(\squareup\connect\v3\resources\Error $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <errors>
     *
     * @return \squareup\connect\v3\resources\Error[]
     */
    public function getErrorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <errors>
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\CaptureChargeResponse
     */
    public function addErrors(\squareup\connect\v3\resources\Error $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <charge> has a value
     *
     * @return boolean
     */
    public function hasCharge(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charge> value
     *
     * @return \squareup\connect\v3\actions\CaptureChargeResponse
     */
    public function clearCharge(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charge> value
     *
     * @return \squareup\connect\v3\resources\Charge
     */
    public function getCharge(){
      return $this->_get(2);
    }
    
    /**
     * Set <charge> value
     *
     * @param \squareup\connect\v3\resources\Charge $value
     * @return \squareup\connect\v3\actions\CaptureChargeResponse
     */
    public function setCharge(\squareup\connect\v3\resources\Charge $value){
      return $this->_set(2, $value);
    }
  }
}

namespace squareup\connect\v3\actions {

  class RetrieveChargeRequest extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $location_id = null;
    
    /**  @var string */
    public $charge_id = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.RetrieveChargeRequest');

      // REQUIRED STRING location_id = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "location_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      // REQUIRED STRING charge_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charge_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_REQUIRED;
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <location_id> has a value
     *
     * @return boolean
     */
    public function hasLocationId(){
      return $this->_has(1);
    }
    
    /**
     * Clear <location_id> value
     *
     * @return \squareup\connect\v3\actions\RetrieveChargeRequest
     */
    public function clearLocationId(){
      return $this->_clear(1);
    }
    
    /**
     * Get <location_id> value
     *
     * @return string
     */
    public function getLocationId(){
      return $this->_get(1);
    }
    
    /**
     * Set <location_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\RetrieveChargeRequest
     */
    public function setLocationId( $value){
      return $this->_set(1, $value);
    }
    
    /**
     * Check if <charge_id> has a value
     *
     * @return boolean
     */
    public function hasChargeId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charge_id> value
     *
     * @return \squareup\connect\v3\actions\RetrieveChargeRequest
     */
    public function clearChargeId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charge_id> value
     *
     * @return string
     */
    public function getChargeId(){
      return $this->_get(2);
    }
    
    /**
     * Set <charge_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\actions\RetrieveChargeRequest
     */
    public function setChargeId( $value){
      return $this->_set(2, $value);
    }
  }
}

namespace squareup\connect\v3\actions {

  class RetrieveChargeResponse extends \DrSlump\Protobuf\Message {

    /**  @var \squareup\connect\v3\resources\Error[]  */
    public $errors = array();
    
    /**  @var \squareup\connect\v3\resources\Charge */
    public $charge = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.actions.RetrieveChargeResponse');

      // REPEATED MESSAGE errors = 1
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 1;
      $f->name      = "errors";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_REPEATED;
      $f->reference = '\squareup\connect\v3\resources\Error';
      $descriptor->addField($f);

      // OPTIONAL MESSAGE charge = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "charge";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\squareup\connect\v3\resources\Charge';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <errors> has a value
     *
     * @return boolean
     */
    public function hasErrors(){
      return $this->_has(1);
    }
    
    /**
     * Clear <errors> value
     *
     * @return \squareup\connect\v3\actions\RetrieveChargeResponse
     */
    public function clearErrors(){
      return $this->_clear(1);
    }
    
    /**
     * Get <errors> value
     *
     * @param int $idx
     * @return \squareup\connect\v3\resources\Error
     */
    public function getErrors($idx = NULL){
      return $this->_get(1, $idx);
    }
    
    /**
     * Set <errors> value
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\RetrieveChargeResponse
     */
    public function setErrors(\squareup\connect\v3\resources\Error $value, $idx = NULL){
      return $this->_set(1, $value, $idx);
    }
    
    /**
     * Get all elements of <errors>
     *
     * @return \squareup\connect\v3\resources\Error[]
     */
    public function getErrorsList(){
     return $this->_get(1);
    }
    
    /**
     * Add a new element to <errors>
     *
     * @param \squareup\connect\v3\resources\Error $value
     * @return \squareup\connect\v3\actions\RetrieveChargeResponse
     */
    public function addErrors(\squareup\connect\v3\resources\Error $value){
     return $this->_add(1, $value);
    }
    
    /**
     * Check if <charge> has a value
     *
     * @return boolean
     */
    public function hasCharge(){
      return $this->_has(2);
    }
    
    /**
     * Clear <charge> value
     *
     * @return \squareup\connect\v3\actions\RetrieveChargeResponse
     */
    public function clearCharge(){
      return $this->_clear(2);
    }
    
    /**
     * Get <charge> value
     *
     * @return \squareup\connect\v3\resources\Charge
     */
    public function getCharge(){
      return $this->_get(2);
    }
    
    /**
     * Set <charge> value
     *
     * @param \squareup\connect\v3\resources\Charge $value
     * @return \squareup\connect\v3\actions\RetrieveChargeResponse
     */
    public function setCharge(\squareup\connect\v3\resources\Charge $value){
      return $this->_set(2, $value);
    }
  }
}

