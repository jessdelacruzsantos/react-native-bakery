<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@
// Source: squareup/connect/v3/resources/refund.proto
//   Date: 2015-11-12 23:33:10

namespace squareup\connect\v3\resources\Refund {

  class Type extends \DrSlump\Protobuf\Enum {
    const FULL = 1;
    const PARTIAL = 2;
  }
}
namespace squareup\connect\v3\resources {

  class Refund extends \DrSlump\Protobuf\Message {

    /**  @var string */
    public $business_id = null;
    
    /**  @var string */
    public $location_id = null;
    
    /**  @var string */
    public $source_transaction_id = null;
    
    /**  @var string */
    public $created_at = null;
    
    /**  @var int - \squareup\connect\v3\resources\Refund\Type */
    public $type = null;
    
    /**  @var string */
    public $reason = null;
    
    /**  @var \squareup\connect\v3\resources\Money */
    public $amount_money = null;
    

    /** @var \Closure[] */
    protected static $__extensions = array();

    public static function descriptor()
    {
      $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, 'squareup.connect.v3.resources.Refund');

      // OPTIONAL STRING business_id = 2
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 2;
      $f->name      = "business_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING location_id = 3
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 3;
      $f->name      = "location_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING source_transaction_id = 4
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 4;
      $f->name      = "source_transaction_id";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL STRING created_at = 5
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 5;
      $f->name      = "created_at";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL ENUM type = 6
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 6;
      $f->name      = "type";
      $f->type      = \DrSlump\Protobuf::TYPE_ENUM;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\squareup\connect\v3\resources\Refund\Type';
      $descriptor->addField($f);

      // OPTIONAL STRING reason = 7
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 7;
      $f->name      = "reason";
      $f->type      = \DrSlump\Protobuf::TYPE_STRING;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $descriptor->addField($f);

      // OPTIONAL MESSAGE amount_money = 8
      $f = new \DrSlump\Protobuf\Field();
      $f->number    = 8;
      $f->name      = "amount_money";
      $f->type      = \DrSlump\Protobuf::TYPE_MESSAGE;
      $f->rule      = \DrSlump\Protobuf::RULE_OPTIONAL;
      $f->reference = '\squareup\connect\v3\resources\Money';
      $descriptor->addField($f);

      foreach (self::$__extensions as $cb) {
        $descriptor->addField($cb(), true);
      }

      return $descriptor;
    }

    /**
     * Check if <business_id> has a value
     *
     * @return boolean
     */
    public function hasBusinessId(){
      return $this->_has(2);
    }
    
    /**
     * Clear <business_id> value
     *
     * @return \squareup\connect\v3\resources\Refund
     */
    public function clearBusinessId(){
      return $this->_clear(2);
    }
    
    /**
     * Get <business_id> value
     *
     * @return string
     */
    public function getBusinessId(){
      return $this->_get(2);
    }
    
    /**
     * Set <business_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\resources\Refund
     */
    public function setBusinessId( $value){
      return $this->_set(2, $value);
    }
    
    /**
     * Check if <location_id> has a value
     *
     * @return boolean
     */
    public function hasLocationId(){
      return $this->_has(3);
    }
    
    /**
     * Clear <location_id> value
     *
     * @return \squareup\connect\v3\resources\Refund
     */
    public function clearLocationId(){
      return $this->_clear(3);
    }
    
    /**
     * Get <location_id> value
     *
     * @return string
     */
    public function getLocationId(){
      return $this->_get(3);
    }
    
    /**
     * Set <location_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\resources\Refund
     */
    public function setLocationId( $value){
      return $this->_set(3, $value);
    }
    
    /**
     * Check if <source_transaction_id> has a value
     *
     * @return boolean
     */
    public function hasSourceTransactionId(){
      return $this->_has(4);
    }
    
    /**
     * Clear <source_transaction_id> value
     *
     * @return \squareup\connect\v3\resources\Refund
     */
    public function clearSourceTransactionId(){
      return $this->_clear(4);
    }
    
    /**
     * Get <source_transaction_id> value
     *
     * @return string
     */
    public function getSourceTransactionId(){
      return $this->_get(4);
    }
    
    /**
     * Set <source_transaction_id> value
     *
     * @param string $value
     * @return \squareup\connect\v3\resources\Refund
     */
    public function setSourceTransactionId( $value){
      return $this->_set(4, $value);
    }
    
    /**
     * Check if <created_at> has a value
     *
     * @return boolean
     */
    public function hasCreatedAt(){
      return $this->_has(5);
    }
    
    /**
     * Clear <created_at> value
     *
     * @return \squareup\connect\v3\resources\Refund
     */
    public function clearCreatedAt(){
      return $this->_clear(5);
    }
    
    /**
     * Get <created_at> value
     *
     * @return string
     */
    public function getCreatedAt(){
      return $this->_get(5);
    }
    
    /**
     * Set <created_at> value
     *
     * @param string $value
     * @return \squareup\connect\v3\resources\Refund
     */
    public function setCreatedAt( $value){
      return $this->_set(5, $value);
    }
    
    /**
     * Check if <type> has a value
     *
     * @return boolean
     */
    public function hasType(){
      return $this->_has(6);
    }
    
    /**
     * Clear <type> value
     *
     * @return \squareup\connect\v3\resources\Refund
     */
    public function clearType(){
      return $this->_clear(6);
    }
    
    /**
     * Get <type> value
     *
     * @return int - \squareup\connect\v3\resources\Refund\Type
     */
    public function getType(){
      return $this->_get(6);
    }
    
    /**
     * Set <type> value
     *
     * @param int - \squareup\connect\v3\resources\Refund\Type $value
     * @return \squareup\connect\v3\resources\Refund
     */
    public function setType( $value){
      return $this->_set(6, $value);
    }
    
    /**
     * Check if <reason> has a value
     *
     * @return boolean
     */
    public function hasReason(){
      return $this->_has(7);
    }
    
    /**
     * Clear <reason> value
     *
     * @return \squareup\connect\v3\resources\Refund
     */
    public function clearReason(){
      return $this->_clear(7);
    }
    
    /**
     * Get <reason> value
     *
     * @return string
     */
    public function getReason(){
      return $this->_get(7);
    }
    
    /**
     * Set <reason> value
     *
     * @param string $value
     * @return \squareup\connect\v3\resources\Refund
     */
    public function setReason( $value){
      return $this->_set(7, $value);
    }
    
    /**
     * Check if <amount_money> has a value
     *
     * @return boolean
     */
    public function hasAmountMoney(){
      return $this->_has(8);
    }
    
    /**
     * Clear <amount_money> value
     *
     * @return \squareup\connect\v3\resources\Refund
     */
    public function clearAmountMoney(){
      return $this->_clear(8);
    }
    
    /**
     * Get <amount_money> value
     *
     * @return \squareup\connect\v3\resources\Money
     */
    public function getAmountMoney(){
      return $this->_get(8);
    }
    
    /**
     * Set <amount_money> value
     *
     * @param \squareup\connect\v3\resources\Money $value
     * @return \squareup\connect\v3\resources\Refund
     */
    public function setAmountMoney(\squareup\connect\v3\resources\Money $value){
      return $this->_set(8, $value);
    }
  }
}

