// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: squareup/connect/v3/resources/money.proto

package squareup.connect.v3.resources;

public final class MoneyOuterClass {
  private MoneyOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code squareup.connect.v3.resources.Currency}
   *
   * <pre>
   **
   * ISO-4217 Currency Codes
   * http://www.currency-iso.org/dl_iso_table_a1.xml
   * Names are the alpha-3 code, ordinals are the numeric code.
   * </pre>
   */
  public enum Currency
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>AED = 784;</code>
     */
    AED(0, 784),
    /**
     * <code>AFN = 971;</code>
     */
    AFN(1, 971),
    /**
     * <code>ALL = 8;</code>
     */
    ALL(2, 8),
    /**
     * <code>AMD = 51;</code>
     */
    AMD(3, 51),
    /**
     * <code>ANG = 532;</code>
     */
    ANG(4, 532),
    /**
     * <code>AOA = 973;</code>
     */
    AOA(5, 973),
    /**
     * <code>ARS = 32;</code>
     */
    ARS(6, 32),
    /**
     * <code>AUD = 36;</code>
     */
    AUD(7, 36),
    /**
     * <code>AWG = 533;</code>
     */
    AWG(8, 533),
    /**
     * <code>AZN = 944;</code>
     */
    AZN(9, 944),
    /**
     * <code>BAM = 977;</code>
     */
    BAM(10, 977),
    /**
     * <code>BBD = 52;</code>
     */
    BBD(11, 52),
    /**
     * <code>BDT = 50;</code>
     */
    BDT(12, 50),
    /**
     * <code>BGN = 975;</code>
     */
    BGN(13, 975),
    /**
     * <code>BHD = 48;</code>
     */
    BHD(14, 48),
    /**
     * <code>BIF = 108;</code>
     */
    BIF(15, 108),
    /**
     * <code>BMD = 60;</code>
     */
    BMD(16, 60),
    /**
     * <code>BND = 96;</code>
     */
    BND(17, 96),
    /**
     * <code>BOB = 68;</code>
     */
    BOB(18, 68),
    /**
     * <code>BOV = 984;</code>
     */
    BOV(19, 984),
    /**
     * <code>BRL = 986;</code>
     */
    BRL(20, 986),
    /**
     * <code>BSD = 44;</code>
     */
    BSD(21, 44),
    /**
     * <code>BTN = 64;</code>
     */
    BTN(22, 64),
    /**
     * <code>BWP = 72;</code>
     */
    BWP(23, 72),
    /**
     * <code>BYR = 974;</code>
     */
    BYR(24, 974),
    /**
     * <code>BZD = 84;</code>
     */
    BZD(25, 84),
    /**
     * <code>CAD = 124;</code>
     */
    CAD(26, 124),
    /**
     * <code>CDF = 976;</code>
     */
    CDF(27, 976),
    /**
     * <code>CHE = 947;</code>
     */
    CHE(28, 947),
    /**
     * <code>CHF = 756;</code>
     */
    CHF(29, 756),
    /**
     * <code>CHW = 948;</code>
     */
    CHW(30, 948),
    /**
     * <code>CLF = 990;</code>
     */
    CLF(31, 990),
    /**
     * <code>CLP = 152;</code>
     */
    CLP(32, 152),
    /**
     * <code>CNY = 156;</code>
     */
    CNY(33, 156),
    /**
     * <code>COP = 170;</code>
     */
    COP(34, 170),
    /**
     * <code>COU = 970;</code>
     */
    COU(35, 970),
    /**
     * <code>CRC = 188;</code>
     */
    CRC(36, 188),
    /**
     * <code>CUC = 931;</code>
     */
    CUC(37, 931),
    /**
     * <code>CUP = 192;</code>
     */
    CUP(38, 192),
    /**
     * <code>CVE = 132;</code>
     */
    CVE(39, 132),
    /**
     * <code>CZK = 203;</code>
     */
    CZK(40, 203),
    /**
     * <code>DJF = 262;</code>
     */
    DJF(41, 262),
    /**
     * <code>DKK = 208;</code>
     */
    DKK(42, 208),
    /**
     * <code>DOP = 214;</code>
     */
    DOP(43, 214),
    /**
     * <code>DZD = 12;</code>
     */
    DZD(44, 12),
    /**
     * <code>EGP = 818;</code>
     */
    EGP(45, 818),
    /**
     * <code>ERN = 232;</code>
     */
    ERN(46, 232),
    /**
     * <code>ETB = 230;</code>
     */
    ETB(47, 230),
    /**
     * <code>EUR = 978;</code>
     */
    EUR(48, 978),
    /**
     * <code>FJD = 242;</code>
     */
    FJD(49, 242),
    /**
     * <code>FKP = 238;</code>
     */
    FKP(50, 238),
    /**
     * <code>GBP = 826;</code>
     */
    GBP(51, 826),
    /**
     * <code>GEL = 981;</code>
     */
    GEL(52, 981),
    /**
     * <code>GHS = 936;</code>
     */
    GHS(53, 936),
    /**
     * <code>GIP = 292;</code>
     */
    GIP(54, 292),
    /**
     * <code>GMD = 270;</code>
     */
    GMD(55, 270),
    /**
     * <code>GNF = 324;</code>
     */
    GNF(56, 324),
    /**
     * <code>GTQ = 320;</code>
     */
    GTQ(57, 320),
    /**
     * <code>GYD = 328;</code>
     */
    GYD(58, 328),
    /**
     * <code>HKD = 344;</code>
     */
    HKD(59, 344),
    /**
     * <code>HNL = 340;</code>
     */
    HNL(60, 340),
    /**
     * <code>HRK = 191;</code>
     */
    HRK(61, 191),
    /**
     * <code>HTG = 332;</code>
     */
    HTG(62, 332),
    /**
     * <code>HUF = 348;</code>
     */
    HUF(63, 348),
    /**
     * <code>IDR = 360;</code>
     */
    IDR(64, 360),
    /**
     * <code>ILS = 376;</code>
     */
    ILS(65, 376),
    /**
     * <code>INR = 356;</code>
     */
    INR(66, 356),
    /**
     * <code>IQD = 368;</code>
     */
    IQD(67, 368),
    /**
     * <code>IRR = 364;</code>
     */
    IRR(68, 364),
    /**
     * <code>ISK = 352;</code>
     */
    ISK(69, 352),
    /**
     * <code>JMD = 388;</code>
     */
    JMD(70, 388),
    /**
     * <code>JOD = 400;</code>
     */
    JOD(71, 400),
    /**
     * <code>JPY = 392;</code>
     */
    JPY(72, 392),
    /**
     * <code>KES = 404;</code>
     */
    KES(73, 404),
    /**
     * <code>KGS = 417;</code>
     */
    KGS(74, 417),
    /**
     * <code>KHR = 116;</code>
     */
    KHR(75, 116),
    /**
     * <code>KMF = 174;</code>
     */
    KMF(76, 174),
    /**
     * <code>KPW = 408;</code>
     */
    KPW(77, 408),
    /**
     * <code>KRW = 410;</code>
     */
    KRW(78, 410),
    /**
     * <code>KWD = 414;</code>
     */
    KWD(79, 414),
    /**
     * <code>KYD = 136;</code>
     */
    KYD(80, 136),
    /**
     * <code>KZT = 398;</code>
     */
    KZT(81, 398),
    /**
     * <code>LAK = 418;</code>
     */
    LAK(82, 418),
    /**
     * <code>LBP = 422;</code>
     */
    LBP(83, 422),
    /**
     * <code>LKR = 144;</code>
     */
    LKR(84, 144),
    /**
     * <code>LRD = 430;</code>
     */
    LRD(85, 430),
    /**
     * <code>LSL = 426;</code>
     */
    LSL(86, 426),
    /**
     * <code>LTL = 440;</code>
     */
    LTL(87, 440),
    /**
     * <code>LVL = 428;</code>
     */
    LVL(88, 428),
    /**
     * <code>LYD = 434;</code>
     */
    LYD(89, 434),
    /**
     * <code>MAD = 504;</code>
     */
    MAD(90, 504),
    /**
     * <code>MDL = 498;</code>
     */
    MDL(91, 498),
    /**
     * <code>MGA = 969;</code>
     */
    MGA(92, 969),
    /**
     * <code>MKD = 807;</code>
     */
    MKD(93, 807),
    /**
     * <code>MMK = 104;</code>
     */
    MMK(94, 104),
    /**
     * <code>MNT = 496;</code>
     */
    MNT(95, 496),
    /**
     * <code>MOP = 446;</code>
     */
    MOP(96, 446),
    /**
     * <code>MRO = 478;</code>
     */
    MRO(97, 478),
    /**
     * <code>MUR = 480;</code>
     */
    MUR(98, 480),
    /**
     * <code>MVR = 462;</code>
     */
    MVR(99, 462),
    /**
     * <code>MWK = 454;</code>
     */
    MWK(100, 454),
    /**
     * <code>MXN = 484;</code>
     */
    MXN(101, 484),
    /**
     * <code>MXV = 979;</code>
     */
    MXV(102, 979),
    /**
     * <code>MYR = 458;</code>
     */
    MYR(103, 458),
    /**
     * <code>MZN = 943;</code>
     */
    MZN(104, 943),
    /**
     * <code>NAD = 516;</code>
     */
    NAD(105, 516),
    /**
     * <code>NGN = 566;</code>
     */
    NGN(106, 566),
    /**
     * <code>NIO = 558;</code>
     */
    NIO(107, 558),
    /**
     * <code>NOK = 578;</code>
     */
    NOK(108, 578),
    /**
     * <code>NPR = 524;</code>
     */
    NPR(109, 524),
    /**
     * <code>NZD = 554;</code>
     */
    NZD(110, 554),
    /**
     * <code>OMR = 512;</code>
     */
    OMR(111, 512),
    /**
     * <code>PAB = 590;</code>
     */
    PAB(112, 590),
    /**
     * <code>PEN = 604;</code>
     */
    PEN(113, 604),
    /**
     * <code>PGK = 598;</code>
     */
    PGK(114, 598),
    /**
     * <code>PHP = 608;</code>
     */
    PHP(115, 608),
    /**
     * <code>PKR = 586;</code>
     */
    PKR(116, 586),
    /**
     * <code>PLN = 985;</code>
     */
    PLN(117, 985),
    /**
     * <code>PYG = 600;</code>
     */
    PYG(118, 600),
    /**
     * <code>QAR = 634;</code>
     */
    QAR(119, 634),
    /**
     * <code>RON = 946;</code>
     */
    RON(120, 946),
    /**
     * <code>RSD = 941;</code>
     */
    RSD(121, 941),
    /**
     * <code>RUB = 643;</code>
     */
    RUB(122, 643),
    /**
     * <code>RWF = 646;</code>
     */
    RWF(123, 646),
    /**
     * <code>SAR = 682;</code>
     */
    SAR(124, 682),
    /**
     * <code>SBD = 90;</code>
     */
    SBD(125, 90),
    /**
     * <code>SCR = 690;</code>
     */
    SCR(126, 690),
    /**
     * <code>SDG = 938;</code>
     */
    SDG(127, 938),
    /**
     * <code>SEK = 752;</code>
     */
    SEK(128, 752),
    /**
     * <code>SGD = 702;</code>
     */
    SGD(129, 702),
    /**
     * <code>SHP = 654;</code>
     */
    SHP(130, 654),
    /**
     * <code>SLL = 694;</code>
     */
    SLL(131, 694),
    /**
     * <code>SOS = 706;</code>
     */
    SOS(132, 706),
    /**
     * <code>SRD = 968;</code>
     */
    SRD(133, 968),
    /**
     * <code>SSP = 728;</code>
     */
    SSP(134, 728),
    /**
     * <code>STD = 678;</code>
     */
    STD(135, 678),
    /**
     * <code>SVC = 222;</code>
     */
    SVC(136, 222),
    /**
     * <code>SYP = 760;</code>
     */
    SYP(137, 760),
    /**
     * <code>SZL = 748;</code>
     */
    SZL(138, 748),
    /**
     * <code>THB = 764;</code>
     */
    THB(139, 764),
    /**
     * <code>TJS = 972;</code>
     */
    TJS(140, 972),
    /**
     * <code>TMT = 934;</code>
     */
    TMT(141, 934),
    /**
     * <code>TND = 788;</code>
     */
    TND(142, 788),
    /**
     * <code>TOP = 776;</code>
     */
    TOP(143, 776),
    /**
     * <code>TRY = 949;</code>
     */
    TRY(144, 949),
    /**
     * <code>TTD = 780;</code>
     */
    TTD(145, 780),
    /**
     * <code>TWD = 901;</code>
     */
    TWD(146, 901),
    /**
     * <code>TZS = 834;</code>
     */
    TZS(147, 834),
    /**
     * <code>UAH = 980;</code>
     */
    UAH(148, 980),
    /**
     * <code>UGX = 800;</code>
     */
    UGX(149, 800),
    /**
     * <code>USD = 840;</code>
     */
    USD(150, 840),
    /**
     * <code>USN = 997;</code>
     */
    USN(151, 997),
    /**
     * <code>USS = 998;</code>
     */
    USS(152, 998),
    /**
     * <code>UYI = 940;</code>
     */
    UYI(153, 940),
    /**
     * <code>UYU = 858;</code>
     */
    UYU(154, 858),
    /**
     * <code>UZS = 860;</code>
     */
    UZS(155, 860),
    /**
     * <code>VEF = 937;</code>
     */
    VEF(156, 937),
    /**
     * <code>VND = 704;</code>
     */
    VND(157, 704),
    /**
     * <code>VUV = 548;</code>
     */
    VUV(158, 548),
    /**
     * <code>WST = 882;</code>
     */
    WST(159, 882),
    /**
     * <code>XAF = 950;</code>
     */
    XAF(160, 950),
    /**
     * <code>XAG = 961;</code>
     */
    XAG(161, 961),
    /**
     * <code>XAU = 959;</code>
     */
    XAU(162, 959),
    /**
     * <code>XBA = 955;</code>
     */
    XBA(163, 955),
    /**
     * <code>XBB = 956;</code>
     */
    XBB(164, 956),
    /**
     * <code>XBC = 957;</code>
     */
    XBC(165, 957),
    /**
     * <code>XBD = 958;</code>
     */
    XBD(166, 958),
    /**
     * <code>XCD = 951;</code>
     */
    XCD(167, 951),
    /**
     * <code>XDR = 960;</code>
     */
    XDR(168, 960),
    /**
     * <code>XOF = 952;</code>
     */
    XOF(169, 952),
    /**
     * <code>XPD = 964;</code>
     */
    XPD(170, 964),
    /**
     * <code>XPF = 953;</code>
     */
    XPF(171, 953),
    /**
     * <code>XPT = 962;</code>
     */
    XPT(172, 962),
    /**
     * <code>XTS = 963;</code>
     */
    XTS(173, 963),
    /**
     * <code>XXX = 999;</code>
     */
    XXX(174, 999),
    /**
     * <code>YER = 886;</code>
     */
    YER(175, 886),
    /**
     * <code>ZAR = 710;</code>
     */
    ZAR(176, 710),
    /**
     * <code>ZMK = 894;</code>
     */
    ZMK(177, 894),
    /**
     * <code>ZMW = 967;</code>
     */
    ZMW(178, 967),
    /**
     * <code>BTC = 1001;</code>
     *
     * <pre>
     * Currency codes not currently in ISO-4217:
     * </pre>
     */
    BTC(179, 1001),
    ;

    /**
     * <code>AED = 784;</code>
     */
    public static final int AED_VALUE = 784;
    /**
     * <code>AFN = 971;</code>
     */
    public static final int AFN_VALUE = 971;
    /**
     * <code>ALL = 8;</code>
     */
    public static final int ALL_VALUE = 8;
    /**
     * <code>AMD = 51;</code>
     */
    public static final int AMD_VALUE = 51;
    /**
     * <code>ANG = 532;</code>
     */
    public static final int ANG_VALUE = 532;
    /**
     * <code>AOA = 973;</code>
     */
    public static final int AOA_VALUE = 973;
    /**
     * <code>ARS = 32;</code>
     */
    public static final int ARS_VALUE = 32;
    /**
     * <code>AUD = 36;</code>
     */
    public static final int AUD_VALUE = 36;
    /**
     * <code>AWG = 533;</code>
     */
    public static final int AWG_VALUE = 533;
    /**
     * <code>AZN = 944;</code>
     */
    public static final int AZN_VALUE = 944;
    /**
     * <code>BAM = 977;</code>
     */
    public static final int BAM_VALUE = 977;
    /**
     * <code>BBD = 52;</code>
     */
    public static final int BBD_VALUE = 52;
    /**
     * <code>BDT = 50;</code>
     */
    public static final int BDT_VALUE = 50;
    /**
     * <code>BGN = 975;</code>
     */
    public static final int BGN_VALUE = 975;
    /**
     * <code>BHD = 48;</code>
     */
    public static final int BHD_VALUE = 48;
    /**
     * <code>BIF = 108;</code>
     */
    public static final int BIF_VALUE = 108;
    /**
     * <code>BMD = 60;</code>
     */
    public static final int BMD_VALUE = 60;
    /**
     * <code>BND = 96;</code>
     */
    public static final int BND_VALUE = 96;
    /**
     * <code>BOB = 68;</code>
     */
    public static final int BOB_VALUE = 68;
    /**
     * <code>BOV = 984;</code>
     */
    public static final int BOV_VALUE = 984;
    /**
     * <code>BRL = 986;</code>
     */
    public static final int BRL_VALUE = 986;
    /**
     * <code>BSD = 44;</code>
     */
    public static final int BSD_VALUE = 44;
    /**
     * <code>BTN = 64;</code>
     */
    public static final int BTN_VALUE = 64;
    /**
     * <code>BWP = 72;</code>
     */
    public static final int BWP_VALUE = 72;
    /**
     * <code>BYR = 974;</code>
     */
    public static final int BYR_VALUE = 974;
    /**
     * <code>BZD = 84;</code>
     */
    public static final int BZD_VALUE = 84;
    /**
     * <code>CAD = 124;</code>
     */
    public static final int CAD_VALUE = 124;
    /**
     * <code>CDF = 976;</code>
     */
    public static final int CDF_VALUE = 976;
    /**
     * <code>CHE = 947;</code>
     */
    public static final int CHE_VALUE = 947;
    /**
     * <code>CHF = 756;</code>
     */
    public static final int CHF_VALUE = 756;
    /**
     * <code>CHW = 948;</code>
     */
    public static final int CHW_VALUE = 948;
    /**
     * <code>CLF = 990;</code>
     */
    public static final int CLF_VALUE = 990;
    /**
     * <code>CLP = 152;</code>
     */
    public static final int CLP_VALUE = 152;
    /**
     * <code>CNY = 156;</code>
     */
    public static final int CNY_VALUE = 156;
    /**
     * <code>COP = 170;</code>
     */
    public static final int COP_VALUE = 170;
    /**
     * <code>COU = 970;</code>
     */
    public static final int COU_VALUE = 970;
    /**
     * <code>CRC = 188;</code>
     */
    public static final int CRC_VALUE = 188;
    /**
     * <code>CUC = 931;</code>
     */
    public static final int CUC_VALUE = 931;
    /**
     * <code>CUP = 192;</code>
     */
    public static final int CUP_VALUE = 192;
    /**
     * <code>CVE = 132;</code>
     */
    public static final int CVE_VALUE = 132;
    /**
     * <code>CZK = 203;</code>
     */
    public static final int CZK_VALUE = 203;
    /**
     * <code>DJF = 262;</code>
     */
    public static final int DJF_VALUE = 262;
    /**
     * <code>DKK = 208;</code>
     */
    public static final int DKK_VALUE = 208;
    /**
     * <code>DOP = 214;</code>
     */
    public static final int DOP_VALUE = 214;
    /**
     * <code>DZD = 12;</code>
     */
    public static final int DZD_VALUE = 12;
    /**
     * <code>EGP = 818;</code>
     */
    public static final int EGP_VALUE = 818;
    /**
     * <code>ERN = 232;</code>
     */
    public static final int ERN_VALUE = 232;
    /**
     * <code>ETB = 230;</code>
     */
    public static final int ETB_VALUE = 230;
    /**
     * <code>EUR = 978;</code>
     */
    public static final int EUR_VALUE = 978;
    /**
     * <code>FJD = 242;</code>
     */
    public static final int FJD_VALUE = 242;
    /**
     * <code>FKP = 238;</code>
     */
    public static final int FKP_VALUE = 238;
    /**
     * <code>GBP = 826;</code>
     */
    public static final int GBP_VALUE = 826;
    /**
     * <code>GEL = 981;</code>
     */
    public static final int GEL_VALUE = 981;
    /**
     * <code>GHS = 936;</code>
     */
    public static final int GHS_VALUE = 936;
    /**
     * <code>GIP = 292;</code>
     */
    public static final int GIP_VALUE = 292;
    /**
     * <code>GMD = 270;</code>
     */
    public static final int GMD_VALUE = 270;
    /**
     * <code>GNF = 324;</code>
     */
    public static final int GNF_VALUE = 324;
    /**
     * <code>GTQ = 320;</code>
     */
    public static final int GTQ_VALUE = 320;
    /**
     * <code>GYD = 328;</code>
     */
    public static final int GYD_VALUE = 328;
    /**
     * <code>HKD = 344;</code>
     */
    public static final int HKD_VALUE = 344;
    /**
     * <code>HNL = 340;</code>
     */
    public static final int HNL_VALUE = 340;
    /**
     * <code>HRK = 191;</code>
     */
    public static final int HRK_VALUE = 191;
    /**
     * <code>HTG = 332;</code>
     */
    public static final int HTG_VALUE = 332;
    /**
     * <code>HUF = 348;</code>
     */
    public static final int HUF_VALUE = 348;
    /**
     * <code>IDR = 360;</code>
     */
    public static final int IDR_VALUE = 360;
    /**
     * <code>ILS = 376;</code>
     */
    public static final int ILS_VALUE = 376;
    /**
     * <code>INR = 356;</code>
     */
    public static final int INR_VALUE = 356;
    /**
     * <code>IQD = 368;</code>
     */
    public static final int IQD_VALUE = 368;
    /**
     * <code>IRR = 364;</code>
     */
    public static final int IRR_VALUE = 364;
    /**
     * <code>ISK = 352;</code>
     */
    public static final int ISK_VALUE = 352;
    /**
     * <code>JMD = 388;</code>
     */
    public static final int JMD_VALUE = 388;
    /**
     * <code>JOD = 400;</code>
     */
    public static final int JOD_VALUE = 400;
    /**
     * <code>JPY = 392;</code>
     */
    public static final int JPY_VALUE = 392;
    /**
     * <code>KES = 404;</code>
     */
    public static final int KES_VALUE = 404;
    /**
     * <code>KGS = 417;</code>
     */
    public static final int KGS_VALUE = 417;
    /**
     * <code>KHR = 116;</code>
     */
    public static final int KHR_VALUE = 116;
    /**
     * <code>KMF = 174;</code>
     */
    public static final int KMF_VALUE = 174;
    /**
     * <code>KPW = 408;</code>
     */
    public static final int KPW_VALUE = 408;
    /**
     * <code>KRW = 410;</code>
     */
    public static final int KRW_VALUE = 410;
    /**
     * <code>KWD = 414;</code>
     */
    public static final int KWD_VALUE = 414;
    /**
     * <code>KYD = 136;</code>
     */
    public static final int KYD_VALUE = 136;
    /**
     * <code>KZT = 398;</code>
     */
    public static final int KZT_VALUE = 398;
    /**
     * <code>LAK = 418;</code>
     */
    public static final int LAK_VALUE = 418;
    /**
     * <code>LBP = 422;</code>
     */
    public static final int LBP_VALUE = 422;
    /**
     * <code>LKR = 144;</code>
     */
    public static final int LKR_VALUE = 144;
    /**
     * <code>LRD = 430;</code>
     */
    public static final int LRD_VALUE = 430;
    /**
     * <code>LSL = 426;</code>
     */
    public static final int LSL_VALUE = 426;
    /**
     * <code>LTL = 440;</code>
     */
    public static final int LTL_VALUE = 440;
    /**
     * <code>LVL = 428;</code>
     */
    public static final int LVL_VALUE = 428;
    /**
     * <code>LYD = 434;</code>
     */
    public static final int LYD_VALUE = 434;
    /**
     * <code>MAD = 504;</code>
     */
    public static final int MAD_VALUE = 504;
    /**
     * <code>MDL = 498;</code>
     */
    public static final int MDL_VALUE = 498;
    /**
     * <code>MGA = 969;</code>
     */
    public static final int MGA_VALUE = 969;
    /**
     * <code>MKD = 807;</code>
     */
    public static final int MKD_VALUE = 807;
    /**
     * <code>MMK = 104;</code>
     */
    public static final int MMK_VALUE = 104;
    /**
     * <code>MNT = 496;</code>
     */
    public static final int MNT_VALUE = 496;
    /**
     * <code>MOP = 446;</code>
     */
    public static final int MOP_VALUE = 446;
    /**
     * <code>MRO = 478;</code>
     */
    public static final int MRO_VALUE = 478;
    /**
     * <code>MUR = 480;</code>
     */
    public static final int MUR_VALUE = 480;
    /**
     * <code>MVR = 462;</code>
     */
    public static final int MVR_VALUE = 462;
    /**
     * <code>MWK = 454;</code>
     */
    public static final int MWK_VALUE = 454;
    /**
     * <code>MXN = 484;</code>
     */
    public static final int MXN_VALUE = 484;
    /**
     * <code>MXV = 979;</code>
     */
    public static final int MXV_VALUE = 979;
    /**
     * <code>MYR = 458;</code>
     */
    public static final int MYR_VALUE = 458;
    /**
     * <code>MZN = 943;</code>
     */
    public static final int MZN_VALUE = 943;
    /**
     * <code>NAD = 516;</code>
     */
    public static final int NAD_VALUE = 516;
    /**
     * <code>NGN = 566;</code>
     */
    public static final int NGN_VALUE = 566;
    /**
     * <code>NIO = 558;</code>
     */
    public static final int NIO_VALUE = 558;
    /**
     * <code>NOK = 578;</code>
     */
    public static final int NOK_VALUE = 578;
    /**
     * <code>NPR = 524;</code>
     */
    public static final int NPR_VALUE = 524;
    /**
     * <code>NZD = 554;</code>
     */
    public static final int NZD_VALUE = 554;
    /**
     * <code>OMR = 512;</code>
     */
    public static final int OMR_VALUE = 512;
    /**
     * <code>PAB = 590;</code>
     */
    public static final int PAB_VALUE = 590;
    /**
     * <code>PEN = 604;</code>
     */
    public static final int PEN_VALUE = 604;
    /**
     * <code>PGK = 598;</code>
     */
    public static final int PGK_VALUE = 598;
    /**
     * <code>PHP = 608;</code>
     */
    public static final int PHP_VALUE = 608;
    /**
     * <code>PKR = 586;</code>
     */
    public static final int PKR_VALUE = 586;
    /**
     * <code>PLN = 985;</code>
     */
    public static final int PLN_VALUE = 985;
    /**
     * <code>PYG = 600;</code>
     */
    public static final int PYG_VALUE = 600;
    /**
     * <code>QAR = 634;</code>
     */
    public static final int QAR_VALUE = 634;
    /**
     * <code>RON = 946;</code>
     */
    public static final int RON_VALUE = 946;
    /**
     * <code>RSD = 941;</code>
     */
    public static final int RSD_VALUE = 941;
    /**
     * <code>RUB = 643;</code>
     */
    public static final int RUB_VALUE = 643;
    /**
     * <code>RWF = 646;</code>
     */
    public static final int RWF_VALUE = 646;
    /**
     * <code>SAR = 682;</code>
     */
    public static final int SAR_VALUE = 682;
    /**
     * <code>SBD = 90;</code>
     */
    public static final int SBD_VALUE = 90;
    /**
     * <code>SCR = 690;</code>
     */
    public static final int SCR_VALUE = 690;
    /**
     * <code>SDG = 938;</code>
     */
    public static final int SDG_VALUE = 938;
    /**
     * <code>SEK = 752;</code>
     */
    public static final int SEK_VALUE = 752;
    /**
     * <code>SGD = 702;</code>
     */
    public static final int SGD_VALUE = 702;
    /**
     * <code>SHP = 654;</code>
     */
    public static final int SHP_VALUE = 654;
    /**
     * <code>SLL = 694;</code>
     */
    public static final int SLL_VALUE = 694;
    /**
     * <code>SOS = 706;</code>
     */
    public static final int SOS_VALUE = 706;
    /**
     * <code>SRD = 968;</code>
     */
    public static final int SRD_VALUE = 968;
    /**
     * <code>SSP = 728;</code>
     */
    public static final int SSP_VALUE = 728;
    /**
     * <code>STD = 678;</code>
     */
    public static final int STD_VALUE = 678;
    /**
     * <code>SVC = 222;</code>
     */
    public static final int SVC_VALUE = 222;
    /**
     * <code>SYP = 760;</code>
     */
    public static final int SYP_VALUE = 760;
    /**
     * <code>SZL = 748;</code>
     */
    public static final int SZL_VALUE = 748;
    /**
     * <code>THB = 764;</code>
     */
    public static final int THB_VALUE = 764;
    /**
     * <code>TJS = 972;</code>
     */
    public static final int TJS_VALUE = 972;
    /**
     * <code>TMT = 934;</code>
     */
    public static final int TMT_VALUE = 934;
    /**
     * <code>TND = 788;</code>
     */
    public static final int TND_VALUE = 788;
    /**
     * <code>TOP = 776;</code>
     */
    public static final int TOP_VALUE = 776;
    /**
     * <code>TRY = 949;</code>
     */
    public static final int TRY_VALUE = 949;
    /**
     * <code>TTD = 780;</code>
     */
    public static final int TTD_VALUE = 780;
    /**
     * <code>TWD = 901;</code>
     */
    public static final int TWD_VALUE = 901;
    /**
     * <code>TZS = 834;</code>
     */
    public static final int TZS_VALUE = 834;
    /**
     * <code>UAH = 980;</code>
     */
    public static final int UAH_VALUE = 980;
    /**
     * <code>UGX = 800;</code>
     */
    public static final int UGX_VALUE = 800;
    /**
     * <code>USD = 840;</code>
     */
    public static final int USD_VALUE = 840;
    /**
     * <code>USN = 997;</code>
     */
    public static final int USN_VALUE = 997;
    /**
     * <code>USS = 998;</code>
     */
    public static final int USS_VALUE = 998;
    /**
     * <code>UYI = 940;</code>
     */
    public static final int UYI_VALUE = 940;
    /**
     * <code>UYU = 858;</code>
     */
    public static final int UYU_VALUE = 858;
    /**
     * <code>UZS = 860;</code>
     */
    public static final int UZS_VALUE = 860;
    /**
     * <code>VEF = 937;</code>
     */
    public static final int VEF_VALUE = 937;
    /**
     * <code>VND = 704;</code>
     */
    public static final int VND_VALUE = 704;
    /**
     * <code>VUV = 548;</code>
     */
    public static final int VUV_VALUE = 548;
    /**
     * <code>WST = 882;</code>
     */
    public static final int WST_VALUE = 882;
    /**
     * <code>XAF = 950;</code>
     */
    public static final int XAF_VALUE = 950;
    /**
     * <code>XAG = 961;</code>
     */
    public static final int XAG_VALUE = 961;
    /**
     * <code>XAU = 959;</code>
     */
    public static final int XAU_VALUE = 959;
    /**
     * <code>XBA = 955;</code>
     */
    public static final int XBA_VALUE = 955;
    /**
     * <code>XBB = 956;</code>
     */
    public static final int XBB_VALUE = 956;
    /**
     * <code>XBC = 957;</code>
     */
    public static final int XBC_VALUE = 957;
    /**
     * <code>XBD = 958;</code>
     */
    public static final int XBD_VALUE = 958;
    /**
     * <code>XCD = 951;</code>
     */
    public static final int XCD_VALUE = 951;
    /**
     * <code>XDR = 960;</code>
     */
    public static final int XDR_VALUE = 960;
    /**
     * <code>XOF = 952;</code>
     */
    public static final int XOF_VALUE = 952;
    /**
     * <code>XPD = 964;</code>
     */
    public static final int XPD_VALUE = 964;
    /**
     * <code>XPF = 953;</code>
     */
    public static final int XPF_VALUE = 953;
    /**
     * <code>XPT = 962;</code>
     */
    public static final int XPT_VALUE = 962;
    /**
     * <code>XTS = 963;</code>
     */
    public static final int XTS_VALUE = 963;
    /**
     * <code>XXX = 999;</code>
     */
    public static final int XXX_VALUE = 999;
    /**
     * <code>YER = 886;</code>
     */
    public static final int YER_VALUE = 886;
    /**
     * <code>ZAR = 710;</code>
     */
    public static final int ZAR_VALUE = 710;
    /**
     * <code>ZMK = 894;</code>
     */
    public static final int ZMK_VALUE = 894;
    /**
     * <code>ZMW = 967;</code>
     */
    public static final int ZMW_VALUE = 967;
    /**
     * <code>BTC = 1001;</code>
     *
     * <pre>
     * Currency codes not currently in ISO-4217:
     * </pre>
     */
    public static final int BTC_VALUE = 1001;


    public final int getNumber() {
      return value;
    }

    public static Currency valueOf(int value) {
      switch (value) {
        case 784: return AED;
        case 971: return AFN;
        case 8: return ALL;
        case 51: return AMD;
        case 532: return ANG;
        case 973: return AOA;
        case 32: return ARS;
        case 36: return AUD;
        case 533: return AWG;
        case 944: return AZN;
        case 977: return BAM;
        case 52: return BBD;
        case 50: return BDT;
        case 975: return BGN;
        case 48: return BHD;
        case 108: return BIF;
        case 60: return BMD;
        case 96: return BND;
        case 68: return BOB;
        case 984: return BOV;
        case 986: return BRL;
        case 44: return BSD;
        case 64: return BTN;
        case 72: return BWP;
        case 974: return BYR;
        case 84: return BZD;
        case 124: return CAD;
        case 976: return CDF;
        case 947: return CHE;
        case 756: return CHF;
        case 948: return CHW;
        case 990: return CLF;
        case 152: return CLP;
        case 156: return CNY;
        case 170: return COP;
        case 970: return COU;
        case 188: return CRC;
        case 931: return CUC;
        case 192: return CUP;
        case 132: return CVE;
        case 203: return CZK;
        case 262: return DJF;
        case 208: return DKK;
        case 214: return DOP;
        case 12: return DZD;
        case 818: return EGP;
        case 232: return ERN;
        case 230: return ETB;
        case 978: return EUR;
        case 242: return FJD;
        case 238: return FKP;
        case 826: return GBP;
        case 981: return GEL;
        case 936: return GHS;
        case 292: return GIP;
        case 270: return GMD;
        case 324: return GNF;
        case 320: return GTQ;
        case 328: return GYD;
        case 344: return HKD;
        case 340: return HNL;
        case 191: return HRK;
        case 332: return HTG;
        case 348: return HUF;
        case 360: return IDR;
        case 376: return ILS;
        case 356: return INR;
        case 368: return IQD;
        case 364: return IRR;
        case 352: return ISK;
        case 388: return JMD;
        case 400: return JOD;
        case 392: return JPY;
        case 404: return KES;
        case 417: return KGS;
        case 116: return KHR;
        case 174: return KMF;
        case 408: return KPW;
        case 410: return KRW;
        case 414: return KWD;
        case 136: return KYD;
        case 398: return KZT;
        case 418: return LAK;
        case 422: return LBP;
        case 144: return LKR;
        case 430: return LRD;
        case 426: return LSL;
        case 440: return LTL;
        case 428: return LVL;
        case 434: return LYD;
        case 504: return MAD;
        case 498: return MDL;
        case 969: return MGA;
        case 807: return MKD;
        case 104: return MMK;
        case 496: return MNT;
        case 446: return MOP;
        case 478: return MRO;
        case 480: return MUR;
        case 462: return MVR;
        case 454: return MWK;
        case 484: return MXN;
        case 979: return MXV;
        case 458: return MYR;
        case 943: return MZN;
        case 516: return NAD;
        case 566: return NGN;
        case 558: return NIO;
        case 578: return NOK;
        case 524: return NPR;
        case 554: return NZD;
        case 512: return OMR;
        case 590: return PAB;
        case 604: return PEN;
        case 598: return PGK;
        case 608: return PHP;
        case 586: return PKR;
        case 985: return PLN;
        case 600: return PYG;
        case 634: return QAR;
        case 946: return RON;
        case 941: return RSD;
        case 643: return RUB;
        case 646: return RWF;
        case 682: return SAR;
        case 90: return SBD;
        case 690: return SCR;
        case 938: return SDG;
        case 752: return SEK;
        case 702: return SGD;
        case 654: return SHP;
        case 694: return SLL;
        case 706: return SOS;
        case 968: return SRD;
        case 728: return SSP;
        case 678: return STD;
        case 222: return SVC;
        case 760: return SYP;
        case 748: return SZL;
        case 764: return THB;
        case 972: return TJS;
        case 934: return TMT;
        case 788: return TND;
        case 776: return TOP;
        case 949: return TRY;
        case 780: return TTD;
        case 901: return TWD;
        case 834: return TZS;
        case 980: return UAH;
        case 800: return UGX;
        case 840: return USD;
        case 997: return USN;
        case 998: return USS;
        case 940: return UYI;
        case 858: return UYU;
        case 860: return UZS;
        case 937: return VEF;
        case 704: return VND;
        case 548: return VUV;
        case 882: return WST;
        case 950: return XAF;
        case 961: return XAG;
        case 959: return XAU;
        case 955: return XBA;
        case 956: return XBB;
        case 957: return XBC;
        case 958: return XBD;
        case 951: return XCD;
        case 960: return XDR;
        case 952: return XOF;
        case 964: return XPD;
        case 953: return XPF;
        case 962: return XPT;
        case 963: return XTS;
        case 999: return XXX;
        case 886: return YER;
        case 710: return ZAR;
        case 894: return ZMK;
        case 967: return ZMW;
        case 1001: return BTC;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Currency>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Currency>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Currency>() {
            public Currency findValueByNumber(int number) {
              return Currency.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return squareup.connect.v3.resources.MoneyOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final Currency[] VALUES = values();

    public static Currency valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Currency(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:squareup.connect.v3.resources.Currency)
  }

  public interface MoneyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:squareup.connect.v3.resources.Money)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int64 amount = 1;</code>
     *
     * <pre>
     *--
     *&#64;desc Amount in the lowest denominated value of this Currency. E.g. in USD
     *these are cents, in JPY they are Yen (which do not have a 'cent' concept).
     *--
     * </pre>
     */
    boolean hasAmount();
    /**
     * <code>optional int64 amount = 1;</code>
     *
     * <pre>
     *--
     *&#64;desc Amount in the lowest denominated value of this Currency. E.g. in USD
     *these are cents, in JPY they are Yen (which do not have a 'cent' concept).
     *--
     * </pre>
     */
    long getAmount();

    /**
     * <code>optional .squareup.connect.v3.resources.Currency currency = 2;</code>
     */
    boolean hasCurrency();
    /**
     * <code>optional .squareup.connect.v3.resources.Currency currency = 2;</code>
     */
    squareup.connect.v3.resources.MoneyOuterClass.Currency getCurrency();
  }
  /**
   * Protobuf type {@code squareup.connect.v3.resources.Money}
   */
  public  static final class Money extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:squareup.connect.v3.resources.Money)
      MoneyOrBuilder {
    // Use Money.newBuilder() to construct.
    private Money(com.google.protobuf.GeneratedMessage.Builder builder) {
      super(builder);
    }
    private Money() {
      amount_ = 0L;
      currency_ = 784;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Money(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
      this();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              amount_ = input.readInt64();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              squareup.connect.v3.resources.MoneyOuterClass.Currency value = squareup.connect.v3.resources.MoneyOuterClass.Currency.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                currency_ = rawValue;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw new RuntimeException(e.setUnfinishedMessage(this));
      } catch (java.io.IOException e) {
        throw new RuntimeException(new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(this));
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return squareup.connect.v3.resources.MoneyOuterClass.internal_static_squareup_connect_v3_resources_Money_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return squareup.connect.v3.resources.MoneyOuterClass.internal_static_squareup_connect_v3_resources_Money_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              squareup.connect.v3.resources.MoneyOuterClass.Money.class, squareup.connect.v3.resources.MoneyOuterClass.Money.Builder.class);
    }

    private int bitField0_;
    public static final int AMOUNT_FIELD_NUMBER = 1;
    private long amount_;
    /**
     * <code>optional int64 amount = 1;</code>
     *
     * <pre>
     *--
     *&#64;desc Amount in the lowest denominated value of this Currency. E.g. in USD
     *these are cents, in JPY they are Yen (which do not have a 'cent' concept).
     *--
     * </pre>
     */
    public boolean hasAmount() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 amount = 1;</code>
     *
     * <pre>
     *--
     *&#64;desc Amount in the lowest denominated value of this Currency. E.g. in USD
     *these are cents, in JPY they are Yen (which do not have a 'cent' concept).
     *--
     * </pre>
     */
    public long getAmount() {
      return amount_;
    }

    public static final int CURRENCY_FIELD_NUMBER = 2;
    private int currency_;
    /**
     * <code>optional .squareup.connect.v3.resources.Currency currency = 2;</code>
     */
    public boolean hasCurrency() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .squareup.connect.v3.resources.Currency currency = 2;</code>
     */
    public squareup.connect.v3.resources.MoneyOuterClass.Currency getCurrency() {
      squareup.connect.v3.resources.MoneyOuterClass.Currency result = squareup.connect.v3.resources.MoneyOuterClass.Currency.valueOf(currency_);
      return result == null ? squareup.connect.v3.resources.MoneyOuterClass.Currency.AED : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, amount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, currency_);
      }
      unknownFields.writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, amount_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, currency_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    public static squareup.connect.v3.resources.MoneyOuterClass.Money parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static squareup.connect.v3.resources.MoneyOuterClass.Money parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static squareup.connect.v3.resources.MoneyOuterClass.Money parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static squareup.connect.v3.resources.MoneyOuterClass.Money parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static squareup.connect.v3.resources.MoneyOuterClass.Money parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      try {
        return PARSER.parseFrom(input);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        if (e.getCause() instanceof java.io.IOException) {
          throw (java.io.IOException) e.getCause();
        }
        throw e;
      }
    }
    public static squareup.connect.v3.resources.MoneyOuterClass.Money parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      try {
        return PARSER.parseFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        if (e.getCause() instanceof java.io.IOException) {
          throw (java.io.IOException) e.getCause();
        }
        throw e;
      }
    }
    public static squareup.connect.v3.resources.MoneyOuterClass.Money parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      try {
        return PARSER.parseDelimitedFrom(input);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        if (e.getCause() instanceof java.io.IOException) {
          throw (java.io.IOException) e.getCause();
        }
        throw e;
      }
    }
    public static squareup.connect.v3.resources.MoneyOuterClass.Money parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      try {  return PARSER.parseDelimitedFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        if (e.getCause() instanceof java.io.IOException) {
          throw (java.io.IOException) e.getCause();
        }
        throw e;
      }
    }
    public static squareup.connect.v3.resources.MoneyOuterClass.Money parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      try {
        return PARSER.parseFrom(input);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        if (e.getCause() instanceof java.io.IOException) {
          throw (java.io.IOException) e.getCause();
        }
        throw e;
      }
    }
    public static squareup.connect.v3.resources.MoneyOuterClass.Money parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      try {
        return PARSER.parseFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        if (e.getCause() instanceof java.io.IOException) {
          throw (java.io.IOException) e.getCause();
        }
        throw e;
      }
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(squareup.connect.v3.resources.MoneyOuterClass.Money prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code squareup.connect.v3.resources.Money}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:squareup.connect.v3.resources.Money)
        squareup.connect.v3.resources.MoneyOuterClass.MoneyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return squareup.connect.v3.resources.MoneyOuterClass.internal_static_squareup_connect_v3_resources_Money_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return squareup.connect.v3.resources.MoneyOuterClass.internal_static_squareup_connect_v3_resources_Money_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                squareup.connect.v3.resources.MoneyOuterClass.Money.class, squareup.connect.v3.resources.MoneyOuterClass.Money.Builder.class);
      }

      // Construct using squareup.connect.v3.resources.MoneyOuterClass.Money.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        amount_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        currency_ = 784;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return squareup.connect.v3.resources.MoneyOuterClass.internal_static_squareup_connect_v3_resources_Money_descriptor;
      }

      public squareup.connect.v3.resources.MoneyOuterClass.Money getDefaultInstanceForType() {
        return squareup.connect.v3.resources.MoneyOuterClass.Money.getDefaultInstance();
      }

      public squareup.connect.v3.resources.MoneyOuterClass.Money build() {
        squareup.connect.v3.resources.MoneyOuterClass.Money result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public squareup.connect.v3.resources.MoneyOuterClass.Money buildPartial() {
        squareup.connect.v3.resources.MoneyOuterClass.Money result = new squareup.connect.v3.resources.MoneyOuterClass.Money(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.amount_ = amount_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.currency_ = currency_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof squareup.connect.v3.resources.MoneyOuterClass.Money) {
          return mergeFrom((squareup.connect.v3.resources.MoneyOuterClass.Money)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(squareup.connect.v3.resources.MoneyOuterClass.Money other) {
        if (other == squareup.connect.v3.resources.MoneyOuterClass.Money.getDefaultInstance()) return this;
        if (other.hasAmount()) {
          setAmount(other.getAmount());
        }
        if (other.hasCurrency()) {
          setCurrency(other.getCurrency());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        squareup.connect.v3.resources.MoneyOuterClass.Money parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (squareup.connect.v3.resources.MoneyOuterClass.Money) e.getUnfinishedMessage();
          if (e.getCause() instanceof java.io.IOException) {
            throw (java.io.IOException) e.getCause();
          }
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long amount_ ;
      /**
       * <code>optional int64 amount = 1;</code>
       *
       * <pre>
       *--
       *&#64;desc Amount in the lowest denominated value of this Currency. E.g. in USD
       *these are cents, in JPY they are Yen (which do not have a 'cent' concept).
       *--
       * </pre>
       */
      public boolean hasAmount() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 amount = 1;</code>
       *
       * <pre>
       *--
       *&#64;desc Amount in the lowest denominated value of this Currency. E.g. in USD
       *these are cents, in JPY they are Yen (which do not have a 'cent' concept).
       *--
       * </pre>
       */
      public long getAmount() {
        return amount_;
      }
      /**
       * <code>optional int64 amount = 1;</code>
       *
       * <pre>
       *--
       *&#64;desc Amount in the lowest denominated value of this Currency. E.g. in USD
       *these are cents, in JPY they are Yen (which do not have a 'cent' concept).
       *--
       * </pre>
       */
      public Builder setAmount(long value) {
        bitField0_ |= 0x00000001;
        amount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 amount = 1;</code>
       *
       * <pre>
       *--
       *&#64;desc Amount in the lowest denominated value of this Currency. E.g. in USD
       *these are cents, in JPY they are Yen (which do not have a 'cent' concept).
       *--
       * </pre>
       */
      public Builder clearAmount() {
        bitField0_ = (bitField0_ & ~0x00000001);
        amount_ = 0L;
        onChanged();
        return this;
      }

      private int currency_ = 784;
      /**
       * <code>optional .squareup.connect.v3.resources.Currency currency = 2;</code>
       */
      public boolean hasCurrency() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .squareup.connect.v3.resources.Currency currency = 2;</code>
       */
      public squareup.connect.v3.resources.MoneyOuterClass.Currency getCurrency() {
        squareup.connect.v3.resources.MoneyOuterClass.Currency result = squareup.connect.v3.resources.MoneyOuterClass.Currency.valueOf(currency_);
        return result == null ? squareup.connect.v3.resources.MoneyOuterClass.Currency.AED : result;
      }
      /**
       * <code>optional .squareup.connect.v3.resources.Currency currency = 2;</code>
       */
      public Builder setCurrency(squareup.connect.v3.resources.MoneyOuterClass.Currency value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        currency_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>optional .squareup.connect.v3.resources.Currency currency = 2;</code>
       */
      public Builder clearCurrency() {
        bitField0_ = (bitField0_ & ~0x00000002);
        currency_ = 784;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:squareup.connect.v3.resources.Money)
    }

    // @@protoc_insertion_point(class_scope:squareup.connect.v3.resources.Money)
    private static final squareup.connect.v3.resources.MoneyOuterClass.Money DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new squareup.connect.v3.resources.MoneyOuterClass.Money();
    }

    public static squareup.connect.v3.resources.MoneyOuterClass.Money getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    public static final com.google.protobuf.Parser<Money> PARSER =
        new com.google.protobuf.AbstractParser<Money>() {
      public Money parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        try {
          return new Money(input, extensionRegistry);
        } catch (RuntimeException e) {
          if (e.getCause() instanceof
              com.google.protobuf.InvalidProtocolBufferException) {
            throw (com.google.protobuf.InvalidProtocolBufferException)
                e.getCause();
          }
          throw e;
        }
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Money> getParserForType() {
      return PARSER;
    }

    public squareup.connect.v3.resources.MoneyOuterClass.Money getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_squareup_connect_v3_resources_Money_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_squareup_connect_v3_resources_Money_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)squareup/connect/v3/resources/money.pr" +
      "oto\022\035squareup.connect.v3.resources\"R\n\005Mo" +
      "ney\022\016\n\006amount\030\001 \001(\003\0229\n\010currency\030\002 \001(\0162\'." +
      "squareup.connect.v3.resources.Currency*\376" +
      "\r\n\010Currency\022\010\n\003AED\020\220\006\022\010\n\003AFN\020\313\007\022\007\n\003ALL\020\010" +
      "\022\007\n\003AMD\0203\022\010\n\003ANG\020\224\004\022\010\n\003AOA\020\315\007\022\007\n\003ARS\020 \022\007" +
      "\n\003AUD\020$\022\010\n\003AWG\020\225\004\022\010\n\003AZN\020\260\007\022\010\n\003BAM\020\321\007\022\007\n" +
      "\003BBD\0204\022\007\n\003BDT\0202\022\010\n\003BGN\020\317\007\022\007\n\003BHD\0200\022\007\n\003BI" +
      "F\020l\022\007\n\003BMD\020<\022\007\n\003BND\020`\022\007\n\003BOB\020D\022\010\n\003BOV\020\330\007" +
      "\022\010\n\003BRL\020\332\007\022\007\n\003BSD\020,\022\007\n\003BTN\020@\022\007\n\003BWP\020H\022\010\n",
      "\003BYR\020\316\007\022\007\n\003BZD\020T\022\007\n\003CAD\020|\022\010\n\003CDF\020\320\007\022\010\n\003C" +
      "HE\020\263\007\022\010\n\003CHF\020\364\005\022\010\n\003CHW\020\264\007\022\010\n\003CLF\020\336\007\022\010\n\003C" +
      "LP\020\230\001\022\010\n\003CNY\020\234\001\022\010\n\003COP\020\252\001\022\010\n\003COU\020\312\007\022\010\n\003C" +
      "RC\020\274\001\022\010\n\003CUC\020\243\007\022\010\n\003CUP\020\300\001\022\010\n\003CVE\020\204\001\022\010\n\003C" +
      "ZK\020\313\001\022\010\n\003DJF\020\206\002\022\010\n\003DKK\020\320\001\022\010\n\003DOP\020\326\001\022\007\n\003D" +
      "ZD\020\014\022\010\n\003EGP\020\262\006\022\010\n\003ERN\020\350\001\022\010\n\003ETB\020\346\001\022\010\n\003EU" +
      "R\020\322\007\022\010\n\003FJD\020\362\001\022\010\n\003FKP\020\356\001\022\010\n\003GBP\020\272\006\022\010\n\003GE" +
      "L\020\325\007\022\010\n\003GHS\020\250\007\022\010\n\003GIP\020\244\002\022\010\n\003GMD\020\216\002\022\010\n\003GN" +
      "F\020\304\002\022\010\n\003GTQ\020\300\002\022\010\n\003GYD\020\310\002\022\010\n\003HKD\020\330\002\022\010\n\003HN" +
      "L\020\324\002\022\010\n\003HRK\020\277\001\022\010\n\003HTG\020\314\002\022\010\n\003HUF\020\334\002\022\010\n\003ID",
      "R\020\350\002\022\010\n\003ILS\020\370\002\022\010\n\003INR\020\344\002\022\010\n\003IQD\020\360\002\022\010\n\003IR" +
      "R\020\354\002\022\010\n\003ISK\020\340\002\022\010\n\003JMD\020\204\003\022\010\n\003JOD\020\220\003\022\010\n\003JP" +
      "Y\020\210\003\022\010\n\003KES\020\224\003\022\010\n\003KGS\020\241\003\022\007\n\003KHR\020t\022\010\n\003KMF" +
      "\020\256\001\022\010\n\003KPW\020\230\003\022\010\n\003KRW\020\232\003\022\010\n\003KWD\020\236\003\022\010\n\003KYD" +
      "\020\210\001\022\010\n\003KZT\020\216\003\022\010\n\003LAK\020\242\003\022\010\n\003LBP\020\246\003\022\010\n\003LKR" +
      "\020\220\001\022\010\n\003LRD\020\256\003\022\010\n\003LSL\020\252\003\022\010\n\003LTL\020\270\003\022\010\n\003LVL" +
      "\020\254\003\022\010\n\003LYD\020\262\003\022\010\n\003MAD\020\370\003\022\010\n\003MDL\020\362\003\022\010\n\003MGA" +
      "\020\311\007\022\010\n\003MKD\020\247\006\022\007\n\003MMK\020h\022\010\n\003MNT\020\360\003\022\010\n\003MOP\020" +
      "\276\003\022\010\n\003MRO\020\336\003\022\010\n\003MUR\020\340\003\022\010\n\003MVR\020\316\003\022\010\n\003MWK\020" +
      "\306\003\022\010\n\003MXN\020\344\003\022\010\n\003MXV\020\323\007\022\010\n\003MYR\020\312\003\022\010\n\003MZN\020",
      "\257\007\022\010\n\003NAD\020\204\004\022\010\n\003NGN\020\266\004\022\010\n\003NIO\020\256\004\022\010\n\003NOK\020" +
      "\302\004\022\010\n\003NPR\020\214\004\022\010\n\003NZD\020\252\004\022\010\n\003OMR\020\200\004\022\010\n\003PAB\020" +
      "\316\004\022\010\n\003PEN\020\334\004\022\010\n\003PGK\020\326\004\022\010\n\003PHP\020\340\004\022\010\n\003PKR\020" +
      "\312\004\022\010\n\003PLN\020\331\007\022\010\n\003PYG\020\330\004\022\010\n\003QAR\020\372\004\022\010\n\003RON\020" +
      "\262\007\022\010\n\003RSD\020\255\007\022\010\n\003RUB\020\203\005\022\010\n\003RWF\020\206\005\022\010\n\003SAR\020" +
      "\252\005\022\007\n\003SBD\020Z\022\010\n\003SCR\020\262\005\022\010\n\003SDG\020\252\007\022\010\n\003SEK\020\360" +
      "\005\022\010\n\003SGD\020\276\005\022\010\n\003SHP\020\216\005\022\010\n\003SLL\020\266\005\022\010\n\003SOS\020\302" +
      "\005\022\010\n\003SRD\020\310\007\022\010\n\003SSP\020\330\005\022\010\n\003STD\020\246\005\022\010\n\003SVC\020\336" +
      "\001\022\010\n\003SYP\020\370\005\022\010\n\003SZL\020\354\005\022\010\n\003THB\020\374\005\022\010\n\003TJS\020\314" +
      "\007\022\010\n\003TMT\020\246\007\022\010\n\003TND\020\224\006\022\010\n\003TOP\020\210\006\022\010\n\003TRY\020\265",
      "\007\022\010\n\003TTD\020\214\006\022\010\n\003TWD\020\205\007\022\010\n\003TZS\020\302\006\022\010\n\003UAH\020\324" +
      "\007\022\010\n\003UGX\020\240\006\022\010\n\003USD\020\310\006\022\010\n\003USN\020\345\007\022\010\n\003USS\020\346" +
      "\007\022\010\n\003UYI\020\254\007\022\010\n\003UYU\020\332\006\022\010\n\003UZS\020\334\006\022\010\n\003VEF\020\251" +
      "\007\022\010\n\003VND\020\300\005\022\010\n\003VUV\020\244\004\022\010\n\003WST\020\362\006\022\010\n\003XAF\020\266" +
      "\007\022\010\n\003XAG\020\301\007\022\010\n\003XAU\020\277\007\022\010\n\003XBA\020\273\007\022\010\n\003XBB\020\274" +
      "\007\022\010\n\003XBC\020\275\007\022\010\n\003XBD\020\276\007\022\010\n\003XCD\020\267\007\022\010\n\003XDR\020\300" +
      "\007\022\010\n\003XOF\020\270\007\022\010\n\003XPD\020\304\007\022\010\n\003XPF\020\271\007\022\010\n\003XPT\020\302" +
      "\007\022\010\n\003XTS\020\303\007\022\010\n\003XXX\020\347\007\022\010\n\003YER\020\366\006\022\010\n\003ZAR\020\306" +
      "\005\022\010\n\003ZMK\020\376\006\022\010\n\003ZMW\020\307\007\022\010\n\003BTC\020\351\007"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_squareup_connect_v3_resources_Money_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_squareup_connect_v3_resources_Money_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_squareup_connect_v3_resources_Money_descriptor,
        new java.lang.String[] { "Amount", "Currency", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
