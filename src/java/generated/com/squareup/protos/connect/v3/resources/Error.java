// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: squareup/connect/v3/resources/error.proto

package com.squareup.protos.connect.v3.resources;

/**
 * Protobuf type {@code squareup.connect.v3.resources.Error}
 *
 * <pre>
 * Errors are always a repeated field. This allows clients to easily group
 * errors by code or by field as they please. The contents of the human-readable
 * detail property may be subject to change.
 * </pre>
 */
public  final class Error extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:squareup.connect.v3.resources.Error)
    ErrorOrBuilder {
  // Use Error.newBuilder() to construct.
  private Error(com.google.protobuf.GeneratedMessage.Builder builder) {
    super(builder);
  }
  private Error() {
    type_ = 0;
    detail_ = "";
    field_ = "";
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private Error(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry) {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            int rawValue = input.readEnum();
            com.squareup.protos.connect.v3.resources.Error.Type value = com.squareup.protos.connect.v3.resources.Error.Type.valueOf(rawValue);
            if (value == null) {
              unknownFields.mergeVarintField(1, rawValue);
            } else {
              bitField0_ |= 0x00000001;
              type_ = rawValue;
            }
            break;
          }
          case 18: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000002;
            detail_ = bs;
            break;
          }
          case 26: {
            com.google.protobuf.ByteString bs = input.readBytes();
            bitField0_ |= 0x00000004;
            field_ = bs;
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw new RuntimeException(e.setUnfinishedMessage(this));
    } catch (java.io.IOException e) {
      throw new RuntimeException(new com.google.protobuf.InvalidProtocolBufferException(e)
          .setUnfinishedMessage(this));
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.squareup.protos.connect.v3.resources.ErrorOuterClass.internal_static_squareup_connect_v3_resources_Error_descriptor;
  }

  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.squareup.protos.connect.v3.resources.ErrorOuterClass.internal_static_squareup_connect_v3_resources_Error_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.squareup.protos.connect.v3.resources.Error.class, com.squareup.protos.connect.v3.resources.Error.Builder.class);
  }

  /**
   * Protobuf enum {@code squareup.connect.v3.resources.Error.Type}
   *
   * <pre>
   * Error types are (http status code * 100 + increment), except for
   * internal_server_error, which is the enum default.
   * </pre>
   */
  public enum Type
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>INTERNAL_SERVER_ERROR = 0;</code>
     *
     * <pre>
     * 500 Internal Server Error
     * </pre>
     */
    INTERNAL_SERVER_ERROR(0, 0),
    /**
     * <code>UNAUTHORIZED = 40100;</code>
     *
     * <pre>
     * 401 Unauthorized
     * </pre>
     */
    UNAUTHORIZED(1, 40100),
    /**
     * <code>ACCESS_TOKEN_EXPIRED = 40101;</code>
     */
    ACCESS_TOKEN_EXPIRED(2, 40101),
    /**
     * <code>ACCESS_TOKEN_REVOKED = 40102;</code>
     */
    ACCESS_TOKEN_REVOKED(3, 40102),
    /**
     * <code>FORBIDDEN = 40300;</code>
     *
     * <pre>
     * 403 Forbidden
     * </pre>
     */
    FORBIDDEN(4, 40300),
    /**
     * <code>INSUFFICIENT_SCOPES = 40301;</code>
     */
    INSUFFICIENT_SCOPES(5, 40301),
    /**
     * <code>APPLICATION_DISABLED = 40302;</code>
     */
    APPLICATION_DISABLED(6, 40302),
    /**
     * <code>V1_APPLICATION = 40303;</code>
     */
    V1_APPLICATION(7, 40303),
    /**
     * <code>V1_ACCESS_TOKEN = 40304;</code>
     */
    V1_ACCESS_TOKEN(8, 40304),
    /**
     * <code>CARD_PROCESSING_NOT_ENABLED = 40305;</code>
     */
    CARD_PROCESSING_NOT_ENABLED(9, 40305),
    /**
     * <code>BAD_REQUEST = 40000;</code>
     *
     * <pre>
     * 400 Bad Request
     * </pre>
     */
    BAD_REQUEST(10, 40000),
    /**
     * <code>MISSING_REQUIRED_PARAMETER = 40001;</code>
     */
    MISSING_REQUIRED_PARAMETER(11, 40001),
    /**
     * <code>INCORRECT_TYPE = 40002;</code>
     *
     * <pre>
     * incorrect type for a field. prefer one of the EXPECTED_* errors.
     * </pre>
     */
    INCORRECT_TYPE(12, 40002),
    /**
     * <code>INVALID_TIME = 40003;</code>
     *
     * <pre>
     * time format was incorrect
     * </pre>
     */
    INVALID_TIME(13, 40003),
    /**
     * <code>INVALID_TIME_RANGE = 40004;</code>
     *
     * <pre>
     * time range is invalid
     * </pre>
     */
    INVALID_TIME_RANGE(14, 40004),
    /**
     * <code>INVALID_VALUE = 40005;</code>
     *
     * <pre>
     * field value is invalid. prefer a more specific error.
     * </pre>
     */
    INVALID_VALUE(15, 40005),
    /**
     * <code>INVALID_CURSOR = 40006;</code>
     */
    INVALID_CURSOR(16, 40006),
    /**
     * <code>UNKNOWN_QUERY_PARAMETER = 40007;</code>
     */
    UNKNOWN_QUERY_PARAMETER(17, 40007),
    /**
     * <code>CONFLICTING_PARAMETERS = 40008;</code>
     */
    CONFLICTING_PARAMETERS(18, 40008),
    /**
     * <code>EXPECTED_JSON_BODY = 40009;</code>
     *
     * <pre>
     * request body is not a JSON object
     * </pre>
     */
    EXPECTED_JSON_BODY(19, 40009),
    /**
     * <code>INVALID_SORT_ORDER = 40010;</code>
     *
     * <pre>
     * sort order must be ASC or DESC
     * </pre>
     */
    INVALID_SORT_ORDER(20, 40010),
    /**
     * <code>VALUE_TOO_LONG = 40011;</code>
     *
     * <pre>
     * string value exceeds maximum length
     * </pre>
     */
    VALUE_TOO_LONG(21, 40011),
    /**
     * <code>VALUE_TOO_LOW = 40012;</code>
     *
     * <pre>
     * value is below a require minimum
     * </pre>
     */
    VALUE_TOO_LOW(22, 40012),
    /**
     * <code>EXPECTED_BOOLEAN = 40013;</code>
     */
    EXPECTED_BOOLEAN(23, 40013),
    /**
     * <code>EXPECTED_INTEGER = 40014;</code>
     */
    EXPECTED_INTEGER(24, 40014),
    /**
     * <code>EXPECTED_FLOAT = 40015;</code>
     */
    EXPECTED_FLOAT(25, 40015),
    /**
     * <code>EXPECTED_STRING = 40016;</code>
     */
    EXPECTED_STRING(26, 40016),
    /**
     * <code>EXPECTED_OBJECT = 40017;</code>
     */
    EXPECTED_OBJECT(27, 40017),
    /**
     * <code>EXPECTED_ARRAY = 40018;</code>
     */
    EXPECTED_ARRAY(28, 40018),
    /**
     * <code>INVALID_ARRAY_VALUE = 40019;</code>
     *
     * <pre>
     * an object in an array does not match the array type
     * </pre>
     */
    INVALID_ARRAY_VALUE(29, 40019),
    /**
     * <code>INVALID_ENUM_VALUE = 40020;</code>
     *
     * <pre>
     * invalid enum value for an enum field
     * </pre>
     */
    INVALID_ENUM_VALUE(30, 40020),
    /**
     * <code>INVALID_CONTENT_TYPE = 40021;</code>
     *
     * <pre>
     * invalid content type header
     * </pre>
     */
    INVALID_CONTENT_TYPE(31, 40021),
    /**
     * <code>INVALID_FORM_VALUE = 40022;</code>
     *
     * <pre>
     * legacy error type for form parsing errors. only for v1 compatibility.
     * </pre>
     */
    INVALID_FORM_VALUE(32, 40022),
    /**
     * <code>CARD_DECLINED = 40023;</code>
     *
     * <pre>
     * these are card/payment related errors (seen in tokenization, charging, linking)
     * </pre>
     */
    CARD_DECLINED(33, 40023),
    /**
     * <code>CARD_EXPIRED = 40024;</code>
     */
    CARD_EXPIRED(34, 40024),
    /**
     * <code>VERIFY_CVV_FAILURE = 40025;</code>
     */
    VERIFY_CVV_FAILURE(35, 40025),
    /**
     * <code>VERIFY_AVS_FAILURE = 40026;</code>
     */
    VERIFY_AVS_FAILURE(36, 40026),
    /**
     * <code>INVALID_EXPIRATION = 40027;</code>
     */
    INVALID_EXPIRATION(37, 40027),
    /**
     * <code>INVALID_EXPIRATION_YEAR = 40028;</code>
     */
    INVALID_EXPIRATION_YEAR(38, 40028),
    /**
     * <code>INVALID_EXPIRATION_DATE = 40039;</code>
     */
    INVALID_EXPIRATION_DATE(39, 40039),
    /**
     * <code>INVALID_CARD = 40040;</code>
     */
    INVALID_CARD(40, 40040),
    /**
     * <code>DELAYED_TRANSACTION_EXPIRED = 40041;</code>
     *
     * <pre>
     * too long since auth
     * </pre>
     */
    DELAYED_TRANSACTION_EXPIRED(41, 40041),
    /**
     * <code>DELAYED_TRANSACTION_CANCELED = 40042;</code>
     *
     * <pre>
     * already cancelled
     * </pre>
     */
    DELAYED_TRANSACTION_CANCELED(42, 40042),
    /**
     * <code>DELAYED_TRANSACTION_CAPTURED = 40043;</code>
     *
     * <pre>
     * already captured
     * </pre>
     */
    DELAYED_TRANSACTION_CAPTURED(43, 40043),
    /**
     * <code>DELAYED_TRANSACTION_FAILED = 40044;</code>
     *
     * <pre>
     * already failed
     * </pre>
     */
    DELAYED_TRANSACTION_FAILED(44, 40044),
    /**
     * <code>CARD_TOKEN_EXPIRED = 40045;</code>
     */
    CARD_TOKEN_EXPIRED(45, 40045),
    /**
     * <code>CARD_TOKEN_USED = 40046;</code>
     */
    CARD_TOKEN_USED(46, 40046),
    /**
     * <code>AMOUNT_TOO_HIGH = 40047;</code>
     */
    AMOUNT_TOO_HIGH(47, 40047),
    /**
     * <code>REFUND_AMOUNT_INVALID = 40048;</code>
     *
     * <pre>
     * The requested refund amount exceeds the amount available to refund.
     * </pre>
     */
    REFUND_AMOUNT_INVALID(48, 40048),
    /**
     * <code>REFUND_ALREADY_PENDING = 40049;</code>
     *
     * <pre>
     * This payment already has a pending refund.
     * </pre>
     */
    REFUND_ALREADY_PENDING(49, 40049),
    /**
     * <code>PAYMENT_NOT_REFUNDABLE = 40050;</code>
     *
     * <pre>
     * Payment is not refundable, e.g. a previous refund has already been rejected
     * and no new refunds can be accepted.
     * </pre>
     */
    PAYMENT_NOT_REFUNDABLE(50, 40050),
    /**
     * <code>NOT_FOUND = 40400;</code>
     *
     * <pre>
     * 404 Not Found
     * </pre>
     */
    NOT_FOUND(51, 40400),
    /**
     * <code>REQUEST_TIMEOUT = 40800;</code>
     *
     * <pre>
     * 408 Request Timeout
     * </pre>
     */
    REQUEST_TIMEOUT(52, 40800),
    /**
     * <code>REQUEST_ENTITY_TOO_LARGE = 41300;</code>
     *
     * <pre>
     * 413 Request Entity Too Large
     * </pre>
     */
    REQUEST_ENTITY_TOO_LARGE(53, 41300),
    /**
     * <code>UNSUPPORTED_MEDIA_TYPE = 41500;</code>
     *
     * <pre>
     * 415 Unsupported Media Type
     * </pre>
     */
    UNSUPPORTED_MEDIA_TYPE(54, 41500),
    /**
     * <code>RATE_LIMITED = 42900;</code>
     *
     * <pre>
     * 429 Rate Limited
     * </pre>
     */
    RATE_LIMITED(55, 42900),
    /**
     * <code>NOT_IMPLEMENTED = 50100;</code>
     *
     * <pre>
     * 501 Not Implemented
     * </pre>
     */
    NOT_IMPLEMENTED(56, 50100),
    /**
     * <code>SERVICE_UNAVAILABLE = 50300;</code>
     *
     * <pre>
     * 503 Service Unavailable
     * </pre>
     */
    SERVICE_UNAVAILABLE(57, 50300),
    ;

    /**
     * <code>INTERNAL_SERVER_ERROR = 0;</code>
     *
     * <pre>
     * 500 Internal Server Error
     * </pre>
     */
    public static final int INTERNAL_SERVER_ERROR_VALUE = 0;
    /**
     * <code>UNAUTHORIZED = 40100;</code>
     *
     * <pre>
     * 401 Unauthorized
     * </pre>
     */
    public static final int UNAUTHORIZED_VALUE = 40100;
    /**
     * <code>ACCESS_TOKEN_EXPIRED = 40101;</code>
     */
    public static final int ACCESS_TOKEN_EXPIRED_VALUE = 40101;
    /**
     * <code>ACCESS_TOKEN_REVOKED = 40102;</code>
     */
    public static final int ACCESS_TOKEN_REVOKED_VALUE = 40102;
    /**
     * <code>FORBIDDEN = 40300;</code>
     *
     * <pre>
     * 403 Forbidden
     * </pre>
     */
    public static final int FORBIDDEN_VALUE = 40300;
    /**
     * <code>INSUFFICIENT_SCOPES = 40301;</code>
     */
    public static final int INSUFFICIENT_SCOPES_VALUE = 40301;
    /**
     * <code>APPLICATION_DISABLED = 40302;</code>
     */
    public static final int APPLICATION_DISABLED_VALUE = 40302;
    /**
     * <code>V1_APPLICATION = 40303;</code>
     */
    public static final int V1_APPLICATION_VALUE = 40303;
    /**
     * <code>V1_ACCESS_TOKEN = 40304;</code>
     */
    public static final int V1_ACCESS_TOKEN_VALUE = 40304;
    /**
     * <code>CARD_PROCESSING_NOT_ENABLED = 40305;</code>
     */
    public static final int CARD_PROCESSING_NOT_ENABLED_VALUE = 40305;
    /**
     * <code>BAD_REQUEST = 40000;</code>
     *
     * <pre>
     * 400 Bad Request
     * </pre>
     */
    public static final int BAD_REQUEST_VALUE = 40000;
    /**
     * <code>MISSING_REQUIRED_PARAMETER = 40001;</code>
     */
    public static final int MISSING_REQUIRED_PARAMETER_VALUE = 40001;
    /**
     * <code>INCORRECT_TYPE = 40002;</code>
     *
     * <pre>
     * incorrect type for a field. prefer one of the EXPECTED_* errors.
     * </pre>
     */
    public static final int INCORRECT_TYPE_VALUE = 40002;
    /**
     * <code>INVALID_TIME = 40003;</code>
     *
     * <pre>
     * time format was incorrect
     * </pre>
     */
    public static final int INVALID_TIME_VALUE = 40003;
    /**
     * <code>INVALID_TIME_RANGE = 40004;</code>
     *
     * <pre>
     * time range is invalid
     * </pre>
     */
    public static final int INVALID_TIME_RANGE_VALUE = 40004;
    /**
     * <code>INVALID_VALUE = 40005;</code>
     *
     * <pre>
     * field value is invalid. prefer a more specific error.
     * </pre>
     */
    public static final int INVALID_VALUE_VALUE = 40005;
    /**
     * <code>INVALID_CURSOR = 40006;</code>
     */
    public static final int INVALID_CURSOR_VALUE = 40006;
    /**
     * <code>UNKNOWN_QUERY_PARAMETER = 40007;</code>
     */
    public static final int UNKNOWN_QUERY_PARAMETER_VALUE = 40007;
    /**
     * <code>CONFLICTING_PARAMETERS = 40008;</code>
     */
    public static final int CONFLICTING_PARAMETERS_VALUE = 40008;
    /**
     * <code>EXPECTED_JSON_BODY = 40009;</code>
     *
     * <pre>
     * request body is not a JSON object
     * </pre>
     */
    public static final int EXPECTED_JSON_BODY_VALUE = 40009;
    /**
     * <code>INVALID_SORT_ORDER = 40010;</code>
     *
     * <pre>
     * sort order must be ASC or DESC
     * </pre>
     */
    public static final int INVALID_SORT_ORDER_VALUE = 40010;
    /**
     * <code>VALUE_TOO_LONG = 40011;</code>
     *
     * <pre>
     * string value exceeds maximum length
     * </pre>
     */
    public static final int VALUE_TOO_LONG_VALUE = 40011;
    /**
     * <code>VALUE_TOO_LOW = 40012;</code>
     *
     * <pre>
     * value is below a require minimum
     * </pre>
     */
    public static final int VALUE_TOO_LOW_VALUE = 40012;
    /**
     * <code>EXPECTED_BOOLEAN = 40013;</code>
     */
    public static final int EXPECTED_BOOLEAN_VALUE = 40013;
    /**
     * <code>EXPECTED_INTEGER = 40014;</code>
     */
    public static final int EXPECTED_INTEGER_VALUE = 40014;
    /**
     * <code>EXPECTED_FLOAT = 40015;</code>
     */
    public static final int EXPECTED_FLOAT_VALUE = 40015;
    /**
     * <code>EXPECTED_STRING = 40016;</code>
     */
    public static final int EXPECTED_STRING_VALUE = 40016;
    /**
     * <code>EXPECTED_OBJECT = 40017;</code>
     */
    public static final int EXPECTED_OBJECT_VALUE = 40017;
    /**
     * <code>EXPECTED_ARRAY = 40018;</code>
     */
    public static final int EXPECTED_ARRAY_VALUE = 40018;
    /**
     * <code>INVALID_ARRAY_VALUE = 40019;</code>
     *
     * <pre>
     * an object in an array does not match the array type
     * </pre>
     */
    public static final int INVALID_ARRAY_VALUE_VALUE = 40019;
    /**
     * <code>INVALID_ENUM_VALUE = 40020;</code>
     *
     * <pre>
     * invalid enum value for an enum field
     * </pre>
     */
    public static final int INVALID_ENUM_VALUE_VALUE = 40020;
    /**
     * <code>INVALID_CONTENT_TYPE = 40021;</code>
     *
     * <pre>
     * invalid content type header
     * </pre>
     */
    public static final int INVALID_CONTENT_TYPE_VALUE = 40021;
    /**
     * <code>INVALID_FORM_VALUE = 40022;</code>
     *
     * <pre>
     * legacy error type for form parsing errors. only for v1 compatibility.
     * </pre>
     */
    public static final int INVALID_FORM_VALUE_VALUE = 40022;
    /**
     * <code>CARD_DECLINED = 40023;</code>
     *
     * <pre>
     * these are card/payment related errors (seen in tokenization, charging, linking)
     * </pre>
     */
    public static final int CARD_DECLINED_VALUE = 40023;
    /**
     * <code>CARD_EXPIRED = 40024;</code>
     */
    public static final int CARD_EXPIRED_VALUE = 40024;
    /**
     * <code>VERIFY_CVV_FAILURE = 40025;</code>
     */
    public static final int VERIFY_CVV_FAILURE_VALUE = 40025;
    /**
     * <code>VERIFY_AVS_FAILURE = 40026;</code>
     */
    public static final int VERIFY_AVS_FAILURE_VALUE = 40026;
    /**
     * <code>INVALID_EXPIRATION = 40027;</code>
     */
    public static final int INVALID_EXPIRATION_VALUE = 40027;
    /**
     * <code>INVALID_EXPIRATION_YEAR = 40028;</code>
     */
    public static final int INVALID_EXPIRATION_YEAR_VALUE = 40028;
    /**
     * <code>INVALID_EXPIRATION_DATE = 40039;</code>
     */
    public static final int INVALID_EXPIRATION_DATE_VALUE = 40039;
    /**
     * <code>INVALID_CARD = 40040;</code>
     */
    public static final int INVALID_CARD_VALUE = 40040;
    /**
     * <code>DELAYED_TRANSACTION_EXPIRED = 40041;</code>
     *
     * <pre>
     * too long since auth
     * </pre>
     */
    public static final int DELAYED_TRANSACTION_EXPIRED_VALUE = 40041;
    /**
     * <code>DELAYED_TRANSACTION_CANCELED = 40042;</code>
     *
     * <pre>
     * already cancelled
     * </pre>
     */
    public static final int DELAYED_TRANSACTION_CANCELED_VALUE = 40042;
    /**
     * <code>DELAYED_TRANSACTION_CAPTURED = 40043;</code>
     *
     * <pre>
     * already captured
     * </pre>
     */
    public static final int DELAYED_TRANSACTION_CAPTURED_VALUE = 40043;
    /**
     * <code>DELAYED_TRANSACTION_FAILED = 40044;</code>
     *
     * <pre>
     * already failed
     * </pre>
     */
    public static final int DELAYED_TRANSACTION_FAILED_VALUE = 40044;
    /**
     * <code>CARD_TOKEN_EXPIRED = 40045;</code>
     */
    public static final int CARD_TOKEN_EXPIRED_VALUE = 40045;
    /**
     * <code>CARD_TOKEN_USED = 40046;</code>
     */
    public static final int CARD_TOKEN_USED_VALUE = 40046;
    /**
     * <code>AMOUNT_TOO_HIGH = 40047;</code>
     */
    public static final int AMOUNT_TOO_HIGH_VALUE = 40047;
    /**
     * <code>REFUND_AMOUNT_INVALID = 40048;</code>
     *
     * <pre>
     * The requested refund amount exceeds the amount available to refund.
     * </pre>
     */
    public static final int REFUND_AMOUNT_INVALID_VALUE = 40048;
    /**
     * <code>REFUND_ALREADY_PENDING = 40049;</code>
     *
     * <pre>
     * This payment already has a pending refund.
     * </pre>
     */
    public static final int REFUND_ALREADY_PENDING_VALUE = 40049;
    /**
     * <code>PAYMENT_NOT_REFUNDABLE = 40050;</code>
     *
     * <pre>
     * Payment is not refundable, e.g. a previous refund has already been rejected
     * and no new refunds can be accepted.
     * </pre>
     */
    public static final int PAYMENT_NOT_REFUNDABLE_VALUE = 40050;
    /**
     * <code>NOT_FOUND = 40400;</code>
     *
     * <pre>
     * 404 Not Found
     * </pre>
     */
    public static final int NOT_FOUND_VALUE = 40400;
    /**
     * <code>REQUEST_TIMEOUT = 40800;</code>
     *
     * <pre>
     * 408 Request Timeout
     * </pre>
     */
    public static final int REQUEST_TIMEOUT_VALUE = 40800;
    /**
     * <code>REQUEST_ENTITY_TOO_LARGE = 41300;</code>
     *
     * <pre>
     * 413 Request Entity Too Large
     * </pre>
     */
    public static final int REQUEST_ENTITY_TOO_LARGE_VALUE = 41300;
    /**
     * <code>UNSUPPORTED_MEDIA_TYPE = 41500;</code>
     *
     * <pre>
     * 415 Unsupported Media Type
     * </pre>
     */
    public static final int UNSUPPORTED_MEDIA_TYPE_VALUE = 41500;
    /**
     * <code>RATE_LIMITED = 42900;</code>
     *
     * <pre>
     * 429 Rate Limited
     * </pre>
     */
    public static final int RATE_LIMITED_VALUE = 42900;
    /**
     * <code>NOT_IMPLEMENTED = 50100;</code>
     *
     * <pre>
     * 501 Not Implemented
     * </pre>
     */
    public static final int NOT_IMPLEMENTED_VALUE = 50100;
    /**
     * <code>SERVICE_UNAVAILABLE = 50300;</code>
     *
     * <pre>
     * 503 Service Unavailable
     * </pre>
     */
    public static final int SERVICE_UNAVAILABLE_VALUE = 50300;


    public final int getNumber() {
      return value;
    }

    public static Type valueOf(int value) {
      switch (value) {
        case 0: return INTERNAL_SERVER_ERROR;
        case 40100: return UNAUTHORIZED;
        case 40101: return ACCESS_TOKEN_EXPIRED;
        case 40102: return ACCESS_TOKEN_REVOKED;
        case 40300: return FORBIDDEN;
        case 40301: return INSUFFICIENT_SCOPES;
        case 40302: return APPLICATION_DISABLED;
        case 40303: return V1_APPLICATION;
        case 40304: return V1_ACCESS_TOKEN;
        case 40305: return CARD_PROCESSING_NOT_ENABLED;
        case 40000: return BAD_REQUEST;
        case 40001: return MISSING_REQUIRED_PARAMETER;
        case 40002: return INCORRECT_TYPE;
        case 40003: return INVALID_TIME;
        case 40004: return INVALID_TIME_RANGE;
        case 40005: return INVALID_VALUE;
        case 40006: return INVALID_CURSOR;
        case 40007: return UNKNOWN_QUERY_PARAMETER;
        case 40008: return CONFLICTING_PARAMETERS;
        case 40009: return EXPECTED_JSON_BODY;
        case 40010: return INVALID_SORT_ORDER;
        case 40011: return VALUE_TOO_LONG;
        case 40012: return VALUE_TOO_LOW;
        case 40013: return EXPECTED_BOOLEAN;
        case 40014: return EXPECTED_INTEGER;
        case 40015: return EXPECTED_FLOAT;
        case 40016: return EXPECTED_STRING;
        case 40017: return EXPECTED_OBJECT;
        case 40018: return EXPECTED_ARRAY;
        case 40019: return INVALID_ARRAY_VALUE;
        case 40020: return INVALID_ENUM_VALUE;
        case 40021: return INVALID_CONTENT_TYPE;
        case 40022: return INVALID_FORM_VALUE;
        case 40023: return CARD_DECLINED;
        case 40024: return CARD_EXPIRED;
        case 40025: return VERIFY_CVV_FAILURE;
        case 40026: return VERIFY_AVS_FAILURE;
        case 40027: return INVALID_EXPIRATION;
        case 40028: return INVALID_EXPIRATION_YEAR;
        case 40039: return INVALID_EXPIRATION_DATE;
        case 40040: return INVALID_CARD;
        case 40041: return DELAYED_TRANSACTION_EXPIRED;
        case 40042: return DELAYED_TRANSACTION_CANCELED;
        case 40043: return DELAYED_TRANSACTION_CAPTURED;
        case 40044: return DELAYED_TRANSACTION_FAILED;
        case 40045: return CARD_TOKEN_EXPIRED;
        case 40046: return CARD_TOKEN_USED;
        case 40047: return AMOUNT_TOO_HIGH;
        case 40048: return REFUND_AMOUNT_INVALID;
        case 40049: return REFUND_ALREADY_PENDING;
        case 40050: return PAYMENT_NOT_REFUNDABLE;
        case 40400: return NOT_FOUND;
        case 40800: return REQUEST_TIMEOUT;
        case 41300: return REQUEST_ENTITY_TOO_LARGE;
        case 41500: return UNSUPPORTED_MEDIA_TYPE;
        case 42900: return RATE_LIMITED;
        case 50100: return NOT_IMPLEMENTED;
        case 50300: return SERVICE_UNAVAILABLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<Type>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Type>() {
            public Type findValueByNumber(int number) {
              return Type.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.squareup.protos.connect.v3.resources.Error.getDescriptor().getEnumTypes().get(0);
    }

    private static final Type[] VALUES = values();

    public static Type valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private Type(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:squareup.connect.v3.resources.Error.Type)
  }

  private int bitField0_;
  public static final int TYPE_FIELD_NUMBER = 1;
  private int type_;
  /**
   * <code>optional .squareup.connect.v3.resources.Error.Type type = 1;</code>
   *
   * <pre>
   * Type is a machine-readable error code.
   * </pre>
   */
  public boolean hasType() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional .squareup.connect.v3.resources.Error.Type type = 1;</code>
   *
   * <pre>
   * Type is a machine-readable error code.
   * </pre>
   */
  public com.squareup.protos.connect.v3.resources.Error.Type getType() {
    com.squareup.protos.connect.v3.resources.Error.Type result = com.squareup.protos.connect.v3.resources.Error.Type.valueOf(type_);
    return result == null ? com.squareup.protos.connect.v3.resources.Error.Type.INTERNAL_SERVER_ERROR : result;
  }

  public static final int DETAIL_FIELD_NUMBER = 2;
  private volatile java.lang.Object detail_;
  /**
   * <code>optional string detail = 2;</code>
   *
   * <pre>
   * Detail is a human-readable error message.
   * </pre>
   */
  public boolean hasDetail() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional string detail = 2;</code>
   *
   * <pre>
   * Detail is a human-readable error message.
   * </pre>
   */
  public java.lang.String getDetail() {
    java.lang.Object ref = detail_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        detail_ = s;
      }
      return s;
    }
  }
  /**
   * <code>optional string detail = 2;</code>
   *
   * <pre>
   * Detail is a human-readable error message.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getDetailBytes() {
    java.lang.Object ref = detail_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      detail_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int FIELD_FIELD_NUMBER = 3;
  private volatile java.lang.Object field_;
  /**
   * <code>optional string field = 3;</code>
   *
   * <pre>
   * Field is a json path to the applicable field.
   * </pre>
   */
  public boolean hasField() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional string field = 3;</code>
   *
   * <pre>
   * Field is a json path to the applicable field.
   * </pre>
   */
  public java.lang.String getField() {
    java.lang.Object ref = field_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      if (bs.isValidUtf8()) {
        field_ = s;
      }
      return s;
    }
  }
  /**
   * <code>optional string field = 3;</code>
   *
   * <pre>
   * Field is a json path to the applicable field.
   * </pre>
   */
  public com.google.protobuf.ByteString
      getFieldBytes() {
    java.lang.Object ref = field_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      field_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeEnum(1, type_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeBytes(2, getDetailBytes());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeBytes(3, getFieldBytes());
    }
    unknownFields.writeTo(output);
  }

  private int memoizedSerializedSize = -1;
  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, type_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(2, getDetailBytes());
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, getFieldBytes());
    }
    size += unknownFields.getSerializedSize();
    memoizedSerializedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  public static com.squareup.protos.connect.v3.resources.Error parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.squareup.protos.connect.v3.resources.Error parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.squareup.protos.connect.v3.resources.Error parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.squareup.protos.connect.v3.resources.Error parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.squareup.protos.connect.v3.resources.Error parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    try {
      return PARSER.parseFrom(input);
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      if (e.getCause() instanceof java.io.IOException) {
        throw (java.io.IOException) e.getCause();
      }
      throw e;
    }
  }
  public static com.squareup.protos.connect.v3.resources.Error parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    try {
      return PARSER.parseFrom(input, extensionRegistry);
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      if (e.getCause() instanceof java.io.IOException) {
        throw (java.io.IOException) e.getCause();
      }
      throw e;
    }
  }
  public static com.squareup.protos.connect.v3.resources.Error parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    try {
      return PARSER.parseDelimitedFrom(input);
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      if (e.getCause() instanceof java.io.IOException) {
        throw (java.io.IOException) e.getCause();
      }
      throw e;
    }
  }
  public static com.squareup.protos.connect.v3.resources.Error parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    try {  return PARSER.parseDelimitedFrom(input, extensionRegistry);
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      if (e.getCause() instanceof java.io.IOException) {
        throw (java.io.IOException) e.getCause();
      }
      throw e;
    }
  }
  public static com.squareup.protos.connect.v3.resources.Error parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    try {
      return PARSER.parseFrom(input);
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      if (e.getCause() instanceof java.io.IOException) {
        throw (java.io.IOException) e.getCause();
      }
      throw e;
    }
  }
  public static com.squareup.protos.connect.v3.resources.Error parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    try {
      return PARSER.parseFrom(input, extensionRegistry);
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      if (e.getCause() instanceof java.io.IOException) {
        throw (java.io.IOException) e.getCause();
      }
      throw e;
    }
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.squareup.protos.connect.v3.resources.Error prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code squareup.connect.v3.resources.Error}
   *
   * <pre>
   * Errors are always a repeated field. This allows clients to easily group
   * errors by code or by field as they please. The contents of the human-readable
   * detail property may be subject to change.
   * </pre>
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:squareup.connect.v3.resources.Error)
      com.squareup.protos.connect.v3.resources.ErrorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.squareup.protos.connect.v3.resources.ErrorOuterClass.internal_static_squareup_connect_v3_resources_Error_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.squareup.protos.connect.v3.resources.ErrorOuterClass.internal_static_squareup_connect_v3_resources_Error_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.squareup.protos.connect.v3.resources.Error.class, com.squareup.protos.connect.v3.resources.Error.Builder.class);
    }

    // Construct using com.squareup.protos.connect.v3.resources.Error.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      type_ = 0;
      bitField0_ = (bitField0_ & ~0x00000001);
      detail_ = "";
      bitField0_ = (bitField0_ & ~0x00000002);
      field_ = "";
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.squareup.protos.connect.v3.resources.ErrorOuterClass.internal_static_squareup_connect_v3_resources_Error_descriptor;
    }

    public com.squareup.protos.connect.v3.resources.Error getDefaultInstanceForType() {
      return com.squareup.protos.connect.v3.resources.Error.getDefaultInstance();
    }

    public com.squareup.protos.connect.v3.resources.Error build() {
      com.squareup.protos.connect.v3.resources.Error result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public com.squareup.protos.connect.v3.resources.Error buildPartial() {
      com.squareup.protos.connect.v3.resources.Error result = new com.squareup.protos.connect.v3.resources.Error(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.type_ = type_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.detail_ = detail_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.field_ = field_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.squareup.protos.connect.v3.resources.Error) {
        return mergeFrom((com.squareup.protos.connect.v3.resources.Error)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.squareup.protos.connect.v3.resources.Error other) {
      if (other == com.squareup.protos.connect.v3.resources.Error.getDefaultInstance()) return this;
      if (other.hasType()) {
        setType(other.getType());
      }
      if (other.hasDetail()) {
        bitField0_ |= 0x00000002;
        detail_ = other.detail_;
        onChanged();
      }
      if (other.hasField()) {
        bitField0_ |= 0x00000004;
        field_ = other.field_;
        onChanged();
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      com.squareup.protos.connect.v3.resources.Error parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (com.squareup.protos.connect.v3.resources.Error) e.getUnfinishedMessage();
        if (e.getCause() instanceof java.io.IOException) {
          throw (java.io.IOException) e.getCause();
        }
        throw e;
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private int type_ = 0;
    /**
     * <code>optional .squareup.connect.v3.resources.Error.Type type = 1;</code>
     *
     * <pre>
     * Type is a machine-readable error code.
     * </pre>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .squareup.connect.v3.resources.Error.Type type = 1;</code>
     *
     * <pre>
     * Type is a machine-readable error code.
     * </pre>
     */
    public com.squareup.protos.connect.v3.resources.Error.Type getType() {
      com.squareup.protos.connect.v3.resources.Error.Type result = com.squareup.protos.connect.v3.resources.Error.Type.valueOf(type_);
      return result == null ? com.squareup.protos.connect.v3.resources.Error.Type.INTERNAL_SERVER_ERROR : result;
    }
    /**
     * <code>optional .squareup.connect.v3.resources.Error.Type type = 1;</code>
     *
     * <pre>
     * Type is a machine-readable error code.
     * </pre>
     */
    public Builder setType(com.squareup.protos.connect.v3.resources.Error.Type value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      type_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>optional .squareup.connect.v3.resources.Error.Type type = 1;</code>
     *
     * <pre>
     * Type is a machine-readable error code.
     * </pre>
     */
    public Builder clearType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
      onChanged();
      return this;
    }

    private java.lang.Object detail_ = "";
    /**
     * <code>optional string detail = 2;</code>
     *
     * <pre>
     * Detail is a human-readable error message.
     * </pre>
     */
    public boolean hasDetail() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string detail = 2;</code>
     *
     * <pre>
     * Detail is a human-readable error message.
     * </pre>
     */
    public java.lang.String getDetail() {
      java.lang.Object ref = detail_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          detail_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string detail = 2;</code>
     *
     * <pre>
     * Detail is a human-readable error message.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getDetailBytes() {
      java.lang.Object ref = detail_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        detail_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string detail = 2;</code>
     *
     * <pre>
     * Detail is a human-readable error message.
     * </pre>
     */
    public Builder setDetail(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      detail_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string detail = 2;</code>
     *
     * <pre>
     * Detail is a human-readable error message.
     * </pre>
     */
    public Builder clearDetail() {
      bitField0_ = (bitField0_ & ~0x00000002);
      detail_ = getDefaultInstance().getDetail();
      onChanged();
      return this;
    }
    /**
     * <code>optional string detail = 2;</code>
     *
     * <pre>
     * Detail is a human-readable error message.
     * </pre>
     */
    public Builder setDetailBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
      detail_ = value;
      onChanged();
      return this;
    }

    private java.lang.Object field_ = "";
    /**
     * <code>optional string field = 3;</code>
     *
     * <pre>
     * Field is a json path to the applicable field.
     * </pre>
     */
    public boolean hasField() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string field = 3;</code>
     *
     * <pre>
     * Field is a json path to the applicable field.
     * </pre>
     */
    public java.lang.String getField() {
      java.lang.Object ref = field_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          field_ = s;
        }
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <code>optional string field = 3;</code>
     *
     * <pre>
     * Field is a json path to the applicable field.
     * </pre>
     */
    public com.google.protobuf.ByteString
        getFieldBytes() {
      java.lang.Object ref = field_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        field_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <code>optional string field = 3;</code>
     *
     * <pre>
     * Field is a json path to the applicable field.
     * </pre>
     */
    public Builder setField(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      field_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional string field = 3;</code>
     *
     * <pre>
     * Field is a json path to the applicable field.
     * </pre>
     */
    public Builder clearField() {
      bitField0_ = (bitField0_ & ~0x00000004);
      field_ = getDefaultInstance().getField();
      onChanged();
      return this;
    }
    /**
     * <code>optional string field = 3;</code>
     *
     * <pre>
     * Field is a json path to the applicable field.
     * </pre>
     */
    public Builder setFieldBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
      field_ = value;
      onChanged();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:squareup.connect.v3.resources.Error)
  }

  // @@protoc_insertion_point(class_scope:squareup.connect.v3.resources.Error)
  private static final com.squareup.protos.connect.v3.resources.Error DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.squareup.protos.connect.v3.resources.Error();
  }

  public static com.squareup.protos.connect.v3.resources.Error getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  public static final com.google.protobuf.Parser<Error> PARSER =
      new com.google.protobuf.AbstractParser<Error>() {
    public Error parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      try {
        return new Error(input, extensionRegistry);
      } catch (RuntimeException e) {
        if (e.getCause() instanceof
            com.google.protobuf.InvalidProtocolBufferException) {
          throw (com.google.protobuf.InvalidProtocolBufferException)
              e.getCause();
        }
        throw e;
      }
    }
  };

  @java.lang.Override
  public com.google.protobuf.Parser<Error> getParserForType() {
    return PARSER;
  }

  public com.squareup.protos.connect.v3.resources.Error getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

