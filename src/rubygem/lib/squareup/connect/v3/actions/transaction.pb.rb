#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

begin; require 'squareup/connect/v3/resources/error.pb'; rescue LoadError; end
begin; require 'squareup/connect/v3/resources/transaction.pb'; rescue LoadError; end

module Squareup
  module Connect
    module V3
      module Actions
        # forward declarations
        class ListTransactionsRequest < ::ProtocolBuffers::Message; end
        class ListTransactionsResponse < ::ProtocolBuffers::Message; end
        class RetrieveTransactionRequest < ::ProtocolBuffers::Message; end
        class RetrieveTransactionResponse < ::ProtocolBuffers::Message; end
        class CaptureTransactionRequest < ::ProtocolBuffers::Message; end
        class CaptureTransactionResponse < ::ProtocolBuffers::Message; end
        class VoidTransactionRequest < ::ProtocolBuffers::Message; end
        class VoidTransactionResponse < ::ProtocolBuffers::Message; end

        class ListTransactionsRequest < ::ProtocolBuffers::Message
          # forward declarations
          class Params < ::ProtocolBuffers::Message; end

          set_fully_qualified_name "squareup.connect.v3.actions.ListTransactionsRequest"

          # nested messages
          class Params < ::ProtocolBuffers::Message
            # forward declarations

            # enums
            module Sort
              include ::ProtocolBuffers::Enum

              set_fully_qualified_name "squareup.connect.v3.actions.ListTransactionsRequest.Params.Sort"

              CREATED_AT_DESC = 0
              CREATED_AT_ASC = 1
            end

            set_fully_qualified_name "squareup.connect.v3.actions.ListTransactionsRequest.Params"

            required :string, :location_id, 1
            required :string, :begin_time, 2
            required :string, :end_time, 3
            required ::Squareup::Connect::V3::Actions::ListTransactionsRequest::Params::Sort, :sort, 4
          end

          optional ::Squareup::Connect::V3::Actions::ListTransactionsRequest::Params, :params, 1
          optional :string, :cursor, 2
        end

        class ListTransactionsResponse < ::ProtocolBuffers::Message
          set_fully_qualified_name "squareup.connect.v3.actions.ListTransactionsResponse"

          repeated ::Squareup::Connect::V3::Resources::Error, :errors, 1
          repeated ::Squareup::Connect::V3::Resources::Transaction, :transactions, 2
          optional :string, :cursor, 3
        end

        class RetrieveTransactionRequest < ::ProtocolBuffers::Message
          set_fully_qualified_name "squareup.connect.v3.actions.RetrieveTransactionRequest"

          required :string, :location_id, 1
          required :string, :transaction_id, 2
        end

        class RetrieveTransactionResponse < ::ProtocolBuffers::Message
          set_fully_qualified_name "squareup.connect.v3.actions.RetrieveTransactionResponse"

          repeated ::Squareup::Connect::V3::Resources::Error, :errors, 1
          optional ::Squareup::Connect::V3::Resources::Transaction, :transaction, 2
        end

        class CaptureTransactionRequest < ::ProtocolBuffers::Message
          set_fully_qualified_name "squareup.connect.v3.actions.CaptureTransactionRequest"

          required :string, :location_id, 1
          required :string, :transaction_id, 2
        end

        class CaptureTransactionResponse < ::ProtocolBuffers::Message
          set_fully_qualified_name "squareup.connect.v3.actions.CaptureTransactionResponse"

          repeated ::Squareup::Connect::V3::Resources::Error, :errors, 1
        end

        class VoidTransactionRequest < ::ProtocolBuffers::Message
          set_fully_qualified_name "squareup.connect.v3.actions.VoidTransactionRequest"

          required :string, :location_id, 1
          required :string, :transaction_id, 2
        end

        class VoidTransactionResponse < ::ProtocolBuffers::Message
          set_fully_qualified_name "squareup.connect.v3.actions.VoidTransactionResponse"

          repeated ::Squareup::Connect::V3::Resources::Error, :errors, 1
        end

      end
    end
  end
end
