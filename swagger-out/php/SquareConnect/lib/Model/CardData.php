<?php
/**
 * CardData
 *
 * PHP version 5
 *
 * @category Class
 * @package  SquareConnect
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace SquareConnect\Model;

use \ArrayAccess;
/**
 * CardData Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     SquareConnect
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class CardData implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'exp_year' => 'int',
        'exp_month' => 'int',
        'billing_postal_code' => 'string',
        'cvv' => 'string',
        'number' => 'string'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'exp_year' => 'exp_year',
        'exp_month' => 'exp_month',
        'billing_postal_code' => 'billing_postal_code',
        'cvv' => 'cvv',
        'number' => 'number'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'exp_year' => 'setExpYear',
        'exp_month' => 'setExpMonth',
        'billing_postal_code' => 'setBillingPostalCode',
        'cvv' => 'setCvv',
        'number' => 'setNumber'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'exp_year' => 'getExpYear',
        'exp_month' => 'getExpMonth',
        'billing_postal_code' => 'getBillingPostalCode',
        'cvv' => 'getCvv',
        'number' => 'getNumber'
    );
  
    
    /**
      * $exp_year The year of the card's expiration date, which must be a 4 digit year.
      * @var int
      */
    protected $exp_year;
    
    /**
      * $exp_month The month of the card's expiration date, which must be between 1-12.
      * @var int
      */
    protected $exp_month;
    
    /**
      * $billing_postal_code The billing postal code for the card on file.
      * @var string
      */
    protected $billing_postal_code;
    
    /**
      * $cvv The card verification value (i.e. security code) printed on the card.
      * @var string
      */
    protected $cvv;
    
    /**
      * $number The number on the card.
      * @var string
      */
    protected $number;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->exp_year = $data["exp_year"];
            $this->exp_month = $data["exp_month"];
            $this->billing_postal_code = $data["billing_postal_code"];
            $this->cvv = $data["cvv"];
            $this->number = $data["number"];
        }
    }
    
    /**
     * Gets exp_year
     * @return int
     */
    public function getExpYear()
    {
        return $this->exp_year;
    }
  
    /**
     * Sets exp_year
     * @param int $exp_year The year of the card's expiration date, which must be a 4 digit year.
     * @return $this
     */
    public function setExpYear($exp_year)
    {
        
        $this->exp_year = $exp_year;
        return $this;
    }
    
    /**
     * Gets exp_month
     * @return int
     */
    public function getExpMonth()
    {
        return $this->exp_month;
    }
  
    /**
     * Sets exp_month
     * @param int $exp_month The month of the card's expiration date, which must be between 1-12.
     * @return $this
     */
    public function setExpMonth($exp_month)
    {
        
        $this->exp_month = $exp_month;
        return $this;
    }
    
    /**
     * Gets billing_postal_code
     * @return string
     */
    public function getBillingPostalCode()
    {
        return $this->billing_postal_code;
    }
  
    /**
     * Sets billing_postal_code
     * @param string $billing_postal_code The billing postal code for the card on file.
     * @return $this
     */
    public function setBillingPostalCode($billing_postal_code)
    {
        
        $this->billing_postal_code = $billing_postal_code;
        return $this;
    }
    
    /**
     * Gets cvv
     * @return string
     */
    public function getCvv()
    {
        return $this->cvv;
    }
  
    /**
     * Sets cvv
     * @param string $cvv The card verification value (i.e. security code) printed on the card.
     * @return $this
     */
    public function setCvv($cvv)
    {
        
        $this->cvv = $cvv;
        return $this;
    }
    
    /**
     * Gets number
     * @return string
     */
    public function getNumber()
    {
        return $this->number;
    }
  
    /**
     * Sets number
     * @param string $number The number on the card.
     * @return $this
     */
    public function setNumber($number)
    {
        
        $this->number = $number;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\SquareConnect\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
