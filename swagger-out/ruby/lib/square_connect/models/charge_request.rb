=begin
Square Connect API

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SquareConnect
  # Defines the parameters that can be included in the body of \na request to the **Charge** endpoint.
  class ChargeRequest
    # 
    attr_accessor :shipping_address

    # The amount of money to collect in the transaction.
    attr_accessor :amount_money

    # The ID of the customer card on file to charge for this transaction. Do\nnot provide a value for this field if you provide a value for `card_nonce`.
    attr_accessor :customer_card_id

    # An optional ID you can associate with the transaction for your own\npurposes (such as to associate the transaction with an entity ID in your\nown database).
    attr_accessor :reference_id

    # If `true`, the request will only perform an Auth on the provided\ncard. You can then later perform either a Capture (with the\n*CaptureTransaction** endpoint) or a Void (with the **VoidTransation** \nendpoint.
    attr_accessor :delay_capture

    # A value you specify that uniquely identifies this \ntransaction among transactions you've created.\n\nIf you're unsure whether a particular transaction succeeded,\nyou can reattempt it with the same idempotency key without\nworrying about double-charging the buyer. Note that *all other fields*\nmust also remain identical in your followup request, or an error will occur.
    attr_accessor :idempotency_key

    # A nonce representing the credit card to charge for this transaction.\nDo not provide a value for this field if you provide a value for\n`customer_card_id`.
    attr_accessor :card_nonce

    # The ID of the customer to associate this transaction with. This field \nis required if you provide a value for `customer_card_id`, and optional\notherwise.
    attr_accessor :customer_id

    # An optional note to associate with the transaction.
    attr_accessor :note

    # If available, Postal code in the billing address for US and Canada payments may reduce decline rate.
    attr_accessor :billing_address

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'shipping_address' => :'shipping_address',
        
        :'amount_money' => :'amount_money',
        
        :'customer_card_id' => :'customer_card_id',
        
        :'reference_id' => :'reference_id',
        
        :'delay_capture' => :'delay_capture',
        
        :'idempotency_key' => :'idempotency_key',
        
        :'card_nonce' => :'card_nonce',
        
        :'customer_id' => :'customer_id',
        
        :'note' => :'note',
        
        :'billing_address' => :'billing_address'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'shipping_address' => :'Address',
        :'amount_money' => :'Money',
        :'customer_card_id' => :'String',
        :'reference_id' => :'String',
        :'delay_capture' => :'BOOLEAN',
        :'idempotency_key' => :'String',
        :'card_nonce' => :'String',
        :'customer_id' => :'String',
        :'note' => :'String',
        :'billing_address' => :'Address'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'shipping_address']
        self.shipping_address = attributes[:'shipping_address']
      end
      
      if attributes[:'amount_money']
        self.amount_money = attributes[:'amount_money']
      end
      
      if attributes[:'customer_card_id']
        self.customer_card_id = attributes[:'customer_card_id']
      end
      
      if attributes[:'reference_id']
        self.reference_id = attributes[:'reference_id']
      end
      
      if attributes[:'delay_capture']
        self.delay_capture = attributes[:'delay_capture']
      end
      
      if attributes[:'idempotency_key']
        self.idempotency_key = attributes[:'idempotency_key']
      end
      
      if attributes[:'card_nonce']
        self.card_nonce = attributes[:'card_nonce']
      end
      
      if attributes[:'customer_id']
        self.customer_id = attributes[:'customer_id']
      end
      
      if attributes[:'note']
        self.note = attributes[:'note']
      end
      
      if attributes[:'billing_address']
        self.billing_address = attributes[:'billing_address']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          shipping_address == o.shipping_address &&
          amount_money == o.amount_money &&
          customer_card_id == o.customer_card_id &&
          reference_id == o.reference_id &&
          delay_capture == o.delay_capture &&
          idempotency_key == o.idempotency_key &&
          card_nonce == o.card_nonce &&
          customer_id == o.customer_id &&
          note == o.note &&
          billing_address == o.billing_address
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [shipping_address, amount_money, customer_card_id, reference_id, delay_capture, idempotency_key, card_nonce, customer_id, note, billing_address].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SquareConnect.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
