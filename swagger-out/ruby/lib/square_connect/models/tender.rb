=begin
Square Connect API

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SquareConnect
  # Represents a tender (i.e., a method of payment) used in a Square transaction.
  class Tender
    # The tender's unique ID.
    attr_accessor :id

    # The ID of the transaction's associated location.
    attr_accessor :location_id

    # The ID of the tender's associated transaction.
    attr_accessor :transaction_id

    # The time when the tender was created, in RFC 3339 format.
    attr_accessor :created_at

    # An optional note associated with the tender at the time of payment.
    attr_accessor :note

    # The amount of the tender.
    attr_accessor :amount_money

    # The amount of any Square processing fees applied to the tender.
    attr_accessor :processing_fee_money

    # If the tender represents a customer's card on file, this is\nthe ID of the associated customer.
    attr_accessor :customer_id

    # The type of tender, such as `CARD` or `CASH`.
    attr_accessor :type

    # The details of the card tender.\n\nThis value is present only if the value of `type` is `CARD`.
    attr_accessor :card_details

    # The details of the cash tender.\n\nThis value is present only if the value of `type` is `CASH`.
    attr_accessor :cash_details

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'location_id' => :'location_id',
        
        :'transaction_id' => :'transaction_id',
        
        :'created_at' => :'created_at',
        
        :'note' => :'note',
        
        :'amount_money' => :'amount_money',
        
        :'processing_fee_money' => :'processing_fee_money',
        
        :'customer_id' => :'customer_id',
        
        :'type' => :'type',
        
        :'card_details' => :'card_details',
        
        :'cash_details' => :'cash_details'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'location_id' => :'String',
        :'transaction_id' => :'String',
        :'created_at' => :'String',
        :'note' => :'String',
        :'amount_money' => :'Money',
        :'processing_fee_money' => :'Money',
        :'customer_id' => :'String',
        :'type' => :'String',
        :'card_details' => :'TenderCardDetails',
        :'cash_details' => :'TenderCashDetails'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'id']
        self.id = attributes[:'id']
      end
      
      if attributes[:'location_id']
        self.location_id = attributes[:'location_id']
      end
      
      if attributes[:'transaction_id']
        self.transaction_id = attributes[:'transaction_id']
      end
      
      if attributes[:'created_at']
        self.created_at = attributes[:'created_at']
      end
      
      if attributes[:'note']
        self.note = attributes[:'note']
      end
      
      if attributes[:'amount_money']
        self.amount_money = attributes[:'amount_money']
      end
      
      if attributes[:'processing_fee_money']
        self.processing_fee_money = attributes[:'processing_fee_money']
      end
      
      if attributes[:'customer_id']
        self.customer_id = attributes[:'customer_id']
      end
      
      if attributes[:'type']
        self.type = attributes[:'type']
      end
      
      if attributes[:'card_details']
        self.card_details = attributes[:'card_details']
      end
      
      if attributes[:'cash_details']
        self.cash_details = attributes[:'cash_details']
      end
      
    end

    # Custom attribute writer method checking allowed values (enum).
    def type=(type)
      allowed_values = ["OTHER", "CARD", "CASH", "THIRD_PARTY_CARD", "SQUARE_GIFT_CARD", "NO_SALE"]
      if type && !allowed_values.include?(type)
        fail "invalid value for 'type', must be one of #{allowed_values}"
      end
      @type = type
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          location_id == o.location_id &&
          transaction_id == o.transaction_id &&
          created_at == o.created_at &&
          note == o.note &&
          amount_money == o.amount_money &&
          processing_fee_money == o.processing_fee_money &&
          customer_id == o.customer_id &&
          type == o.type &&
          card_details == o.card_details &&
          cash_details == o.cash_details
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [id, location_id, transaction_id, created_at, note, amount_money, processing_fee_money, customer_id, type, card_details, cash_details].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SquareConnect.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
