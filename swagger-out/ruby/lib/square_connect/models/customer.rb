=begin
Square Connect API

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git


=end

require 'date'

module SquareConnect
  # 
  class Customer
    # The customer's unique ID.
    attr_accessor :id

    # 
    attr_accessor :phone_number

    # The time when the customer was updated, in RFC 3339 format.
    attr_accessor :updated_at

    # 
    attr_accessor :address

    # 
    attr_accessor :nickname

    # 
    attr_accessor :reference_id

    # 
    attr_accessor :family_name

    # The time when the customer was created, in RFC 3339 format.
    attr_accessor :created_at

    # 
    attr_accessor :given_name

    # 
    attr_accessor :note

    # Cards on file for the customer.
    attr_accessor :cards

    # 
    attr_accessor :email_address

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        
        :'id' => :'id',
        
        :'phone_number' => :'phone_number',
        
        :'updated_at' => :'updated_at',
        
        :'address' => :'address',
        
        :'nickname' => :'nickname',
        
        :'reference_id' => :'reference_id',
        
        :'family_name' => :'family_name',
        
        :'created_at' => :'created_at',
        
        :'given_name' => :'given_name',
        
        :'note' => :'note',
        
        :'cards' => :'cards',
        
        :'email_address' => :'email_address'
        
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'String',
        :'phone_number' => :'String',
        :'updated_at' => :'String',
        :'address' => :'Address',
        :'nickname' => :'String',
        :'reference_id' => :'String',
        :'family_name' => :'String',
        :'created_at' => :'String',
        :'given_name' => :'String',
        :'note' => :'String',
        :'cards' => :'Array<Card>',
        :'email_address' => :'String'
        
      }
    end

    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.inject({}){|memo,(k,v)| memo[k.to_sym] = v; memo}

      
      if attributes[:'id']
        self.id = attributes[:'id']
      end
      
      if attributes[:'phone_number']
        self.phone_number = attributes[:'phone_number']
      end
      
      if attributes[:'updated_at']
        self.updated_at = attributes[:'updated_at']
      end
      
      if attributes[:'address']
        self.address = attributes[:'address']
      end
      
      if attributes[:'nickname']
        self.nickname = attributes[:'nickname']
      end
      
      if attributes[:'reference_id']
        self.reference_id = attributes[:'reference_id']
      end
      
      if attributes[:'family_name']
        self.family_name = attributes[:'family_name']
      end
      
      if attributes[:'created_at']
        self.created_at = attributes[:'created_at']
      end
      
      if attributes[:'given_name']
        self.given_name = attributes[:'given_name']
      end
      
      if attributes[:'note']
        self.note = attributes[:'note']
      end
      
      if attributes[:'cards']
        if (value = attributes[:'cards']).is_a?(Array)
          self.cards = value
        end
      end
      
      if attributes[:'email_address']
        self.email_address = attributes[:'email_address']
      end
      
    end

    # Check equality by comparing each attribute.
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          phone_number == o.phone_number &&
          updated_at == o.updated_at &&
          address == o.address &&
          nickname == o.nickname &&
          reference_id == o.reference_id &&
          family_name == o.family_name &&
          created_at == o.created_at &&
          given_name == o.given_name &&
          note == o.note &&
          cards == o.cards &&
          email_address == o.email_address
    end

    # @see the `==` method
    def eql?(o)
      self == o
    end

    # Calculate hash code according to all attributes.
    def hash
      [id, phone_number, updated_at, address, nickname, reference_id, family_name, created_at, given_name, note, cards, email_address].hash
    end

    # build the object from hash
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          else
            #TODO show warning in debug mode
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        else
          # data not found in attributes(hash), not an issue as the data can be optional
        end
      end

      self
    end

    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        _model = SquareConnect.const_get(type).new
        _model.build_from_hash(value)
      end
    end

    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_body (backward compatibility))
    def to_body
      to_hash
    end

    # return the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Method to output non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
